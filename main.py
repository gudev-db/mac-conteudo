import streamlit as st
import io
import google.generativeai as genai
from PIL import Image
import requests
import datetime
import os
from pymongo import MongoClient
from bson import ObjectId
import json
import hashlib
from google.genai import types
import uuid
from datetime import datetime

# Configura√ß√£o inicial
st.set_page_config(
    layout="wide",
    page_title="Agente Generativo",
    page_icon="ü§ñ"
)

# --- Sistema de Autentica√ß√£o ---
def make_hashes(password):
    return hashlib.sha256(str.encode(password)).hexdigest()

def check_hashes(password, hashed_text):
    return make_hashes(password) == hashed_text

# Dados de usu√°rio (em produ√ß√£o, isso deve vir de um banco de dados seguro)
users = {
    "admin": make_hashes("senha1234"),  # admin/senha1234
    "user1": make_hashes("password1"),  # user1/password1
    "user2": make_hashes("password2")   # user2/password2
}

def login():
    """Formul√°rio de login"""
    st.title("üîí Agente Generativo - Login")
    
    with st.form("login_form"):
        username = st.text_input("Usu√°rio")
        password = st.text_input("Senha", type="password")
        submit_button = st.form_submit_button("Login")
        
        if submit_button:
            if username in users and check_hashes(password, users[username]):
                st.session_state.logged_in = True
                st.session_state.user = username
                st.success("Login realizado com sucesso!")
                st.rerun()
            else:
                st.error("Usu√°rio ou senha incorretos")

# Verificar se o usu√°rio est√° logado
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    login()
    st.stop()

# --- CONEX√ÉO MONGODB (ap√≥s login) ---
client = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
db = client['agentes_personalizados']
collection_agentes = db['agentes']
collection_conversas = db['conversas']

# Configura√ß√£o da API do Gemini
gemini_api_key = os.getenv("GEM_API_KEY")
if not gemini_api_key:
    st.error("GEMINI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
    st.stop()

genai.configure(api_key=gemini_api_key)
modelo_vision = genai.GenerativeModel("gemini-2.5-flash", generation_config={"temperature": 0.1})
modelo_texto = genai.GenerativeModel("gemini-2.5-flash")

# Configura√ß√£o da API do Perplexity
perp_api_key = os.getenv("PERP_API_KEY")
if not perp_api_key:
    st.error("PERP_API_KEY n√£o encontrada nas vari√°veis de ambiente")

# --- Interface Principal ---
st.sidebar.title(f"ü§ñ Bem-vindo, {st.session_state.user}!")

# Bot√£o de logout na sidebar
if st.sidebar.button("üö™ Sair", key="logout_btn"):
    for key in ["logged_in", "user", "admin_password_correct", "admin_user"]:
        if key in st.session_state:
            del st.session_state[key]
    st.rerun()

st.title("ü§ñ Agente Generativo Personaliz√°vel")

# Menu de abas
tab_chat, tab_briefing, tab_conteudo, tab_blog, tab_revisao_ortografica, tab_revisao_tecnica, tab_briefing_tecnico, tab_otimizacao = st.tabs([
    "üí¨ Chat", 
    "üìã Gera√ß√£o de Briefing",
    "‚ú® Gera√ß√£o de Conte√∫do", 
    "üå± Gera√ß√£o de Conte√∫do Blog",
    "üìù Revis√£o Ortogr√°fica",
    "üîß Revis√£o T√©cnica",
    "‚öôÔ∏è Gera√ß√£o de Briefing T√©cnico",
    "üöÄ Otimiza√ß√£o de Conte√∫do"
])

# ========== ABA: CHAT ==========
with tab_chat:
    st.header("üí¨ Chat com Agente")
    
    # Inicializar estado da sess√£o
    if "agente_selecionado" not in st.session_state:
        st.session_state.agente_selecionado = None
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "segmentos_selecionados" not in st.session_state:
        st.session_state.segmentos_selecionados = ["system_prompt", "base_conhecimento", "comments", "planejamento"]
    
    # Fun√ß√µes CRUD para Agentes (simplificadas para este exemplo)
    def listar_agentes():
        return list(collection_agentes.find({"ativo": True}).sort("data_criacao", -1))
    
    def obter_agente_com_heranca(agente_id):
        agente = collection_agentes.find_one({"_id": ObjectId(agente_id)})
        return agente
    
    def construir_contexto(agente, segmentos_selecionados, historico_mensagens=None):
        contexto = ""
        
        if "system_prompt" in segmentos_selecionados and agente.get('system_prompt'):
            contexto += f"### INSTRU√á√ïES DO SISTEMA ###\n{agente['system_prompt']}\n\n"
        
        if "base_conhecimento" in segmentos_selecionados and agente.get('base_conhecimento'):
            contexto += f"### BASE DE CONHECIMENTO ###\n{agente['base_conhecimento']}\n\n"
        
        if "comments" in segmentos_selecionados and agente.get('comments'):
            contexto += f"### COMENT√ÅRIOS DO CLIENTE ###\n{agente['comments']}\n\n"
        
        if "planejamento" in segmentos_selecionados and agente.get('planejamento'):
            contexto += f"### PLANEJAMENTO ###\n{agente['planejamento']}\n\n"
        
        # Adicionar hist√≥rico se fornecido
        if historico_mensagens:
            contexto += "### HIST√ìRICO DA CONVERSA ###\n"
            for msg in historico_mensagens:
                contexto += f"{msg['role']}: {msg['content']}\n"
            contexto += "\n"
        
        contexto += "### RESPOSTA ATUAL ###\nassistant:"
        
        return contexto
    
    # Sele√ß√£o de agente
    if not st.session_state.agente_selecionado:
        agentes = listar_agentes()
        if agentes:
            agente_options = {}
            for agente in agentes:
                display_name = f"{agente['nome']} ({agente.get('categoria', 'Social')})"
                agente_options[display_name] = agente
            
            agente_selecionado_display = st.selectbox("Selecione um agente para conversar:", 
                                                     list(agente_options.keys()))
            
            if st.button("Iniciar Conversa", key="iniciar_chat"):
                st.session_state.agente_selecionado = agente_options[agente_selecionado_display]
                st.session_state.messages = []
                st.rerun()
        else:
            st.info("Nenhum agente dispon√≠vel.")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Conversando com: {agente['nome']}")
        
        # Controles de segmentos
        st.sidebar.subheader("üîß Configura√ß√µes do Agente")
        st.sidebar.write("Selecione quais bases de conhecimento usar:")
        
        segmentos_disponiveis = {
            "Prompt do Sistema": "system_prompt",
            "Brand Guidelines": "base_conhecimento", 
            "Coment√°rios do Cliente": "comments",
            "Planejamento": "planejamento"
        }
        
        segmentos_selecionados = []
        for nome, chave in segmentos_disponiveis.items():
            if st.sidebar.checkbox(nome, value=chave in st.session_state.segmentos_selecionados, key=f"seg_{chave}"):
                segmentos_selecionados.append(chave)
        
        st.session_state.segmentos_selecionados = segmentos_selecionados
        
        # Bot√£o para trocar de agente
        if st.button("Trocar de Agente", key="trocar_agente"):
            st.session_state.agente_selecionado = None
            st.session_state.messages = []
            st.rerun()
        
        # Exibir hist√≥rico de mensagens
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Input do usu√°rio
        if prompt := st.chat_input("Digite sua mensagem..."):
            # Adicionar mensagem do usu√°rio ao hist√≥rico
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Construir contexto com segmentos selecionados
            contexto = construir_contexto(
                agente, 
                st.session_state.segmentos_selecionados, 
                st.session_state.messages
            )
            
            # Gerar resposta
            with st.chat_message("assistant"):
                with st.spinner('Pensando...'):
                    try:
                        resposta = modelo_texto.generate_content(contexto)
                        st.markdown(resposta.text)
                        
                        # Adicionar ao hist√≥rico
                        st.session_state.messages.append({"role": "assistant", "content": resposta.text})
                        
                    except Exception as e:
                        st.error(f"Erro ao gerar resposta: {str(e)}")

# ========== ABA: GERA√á√ÉO DE BRIEFING ==========
with tab_briefing:
    st.header("üìã Gerador de Briefing")
    st.caption("Crie briefings completos para diferentes √°reas de atua√ß√£o")
    
    # Conex√£o com MongoDB para briefings
    try:
        client2 = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
        db_briefings = client2['briefings_Broto_Tecnologia']
        collection_briefings = db_briefings['briefings']
        mongo_connected = True
    except Exception as e:
        st.error(f"Erro na conex√£o com MongoDB: {str(e)}")
        mongo_connected = False
    
    # Tipos de briefing dispon√≠veis organizados por categoria
    tipos_briefing = {
        "Social": [
            "Post √∫nico",
            "Planejamento Mensal"
        ],
        "CRM": [
            "Planejamento de CRM",
            "Fluxo de Nutri√ß√£o",
            "Email Marketing"
        ],
        "M√≠dias": [
            "Campanha de M√≠dia"
        ],
        "Tech": [
            "Manuten√ß√£o de Site",
            "Constru√ß√£o de Site",
            "Landing Page"
        ],
        "Analytics": [
            "Dashboards"
        ],
        "Design": [
            "Social",
            "CRM",
            "M√≠dia",
            "KV/Identidade Visual"
        ],
        "Reda√ß√£o": [
            "Email Marketing",
            "Site",
            "Campanha de M√≠dias"
        ],
        "Planejamento": [
            "Relat√≥rios",
            "Estrat√©gico",
            "Concorr√™ncia"
        ]
    }

    # Aba de configura√ß√£o
    tab_new, tab_saved = st.tabs(["Novo Briefing", "Briefings Salvos"])
        
    with tab_new:
        # Sele√ß√£o hier√°rquica do tipo de briefing
        categoria = st.selectbox("Categoria:", list(tipos_briefing.keys()))
        tipo_briefing = st.selectbox("Tipo de Briefing:", tipos_briefing[categoria])
        
        # Campos comuns a todos os briefings
        st.subheader("Informa√ß√µes B√°sicas")
        nome_projeto = st.text_input("Nome do Projeto:")
        responsavel = st.text_input("Respons√°vel pelo Briefing:")
        data_entrega = st.date_input("Data de Entrega Prevista:")
        objetivo_geral = st.text_area("Objetivo Geral:")
        obs = st.text_area("Observa√ß√µes")
        
        # Se√ß√£o din√¢mica baseada no tipo de briefing
        st.subheader("Informa√ß√µes Espec√≠ficas")
        
        # Dicion√°rio para armazenar todos os campos
        campos_briefing = {
            "basicos": {
                "nome_projeto": nome_projeto,
                "responsavel": responsavel,
                "data_entrega": str(data_entrega),
                "objetivo_geral": objetivo_geral,
                "obs": obs
            },
            "especificos": {}
        }
            
        # Fun√ß√£o para criar campos din√¢micos com sele√ß√£o
        def criar_campo_selecionavel(rotulo, tipo="text_area", opcoes=None, padrao=None, key_suffix=""):
            key = f"{rotulo}_{key_suffix}_{tipo}"
            
            if key not in st.session_state:
                st.session_state[key] = padrao if padrao is not None else ""
            
            col1, col2 = st.columns([4, 1])
            valor = None
            
            with col1:
                if tipo == "text_area":
                    valor = st.text_area(rotulo, value=st.session_state[key], key=f"input_{key}")
                elif tipo == "text_input":
                    valor = st.text_input(rotulo, value=st.session_state[key], key=f"input_{key}")
                elif tipo == "selectbox":
                    valor = st.selectbox(rotulo, opcoes, index=opcoes.index(st.session_state[key]) if st.session_state[key] in opcoes else 0, key=f"input_{key}")
                elif tipo == "multiselect":
                    valor = st.multiselect(rotulo, opcoes, default=st.session_state[key], key=f"input_{key}")
                elif tipo == "date_input":
                    valor = st.date_input(rotulo, value=st.session_state[key], key=f"input_{key}")
                elif tipo == "number_input":
                    valor = st.number_input(rotulo, value=st.session_state[key], key=f"input_{key}")
                elif tipo == "file_uploader":
                    return st.file_uploader(rotulo, key=f"input_{key}")
            
            with col2:
                incluir = st.checkbox("", value=True, key=f"incluir_{key}")
                auto_preencher = st.button("ü™Ñ", key=f"auto_{key}", help="Preencher automaticamente com LLM")
            
            if auto_preencher:
                prompt = f"Preencha o campo '{rotulo}' para um briefing do tipo {tipo_briefing}. Retorne APENAS o valor para o campo, sem coment√°rios ou formata√ß√£o adicional."
                
                try:
                    resposta = modelo_texto.generate_content(prompt)
                    st.session_state[key] = resposta.text
                    st.rerun()
                except Exception as e:
                    st.error(f"Erro ao gerar sugest√£o: {str(e)}")
                    st.session_state[key] = ""
            
            if valor is not None and valor != st.session_state[key]:
                st.session_state[key] = valor
            
            return st.session_state[key] if incluir else None

        # Exemplo de campos para Post √∫nico
        if tipo_briefing == "Post √∫nico":
            campos_briefing['especificos']['fotos'] = criar_campo_selecionavel("Sugest√£o de Fotos necess√°rias:")
            campos_briefing['especificos']['texto'] = criar_campo_selecionavel("Sugest√£o de Texto do post:")
            campos_briefing['especificos']['expectativa'] = criar_campo_selecionavel("Sugest√£o de Expectativa de resultado:")
            campos_briefing['especificos']['tom_voz'] = criar_campo_selecionavel("Sugest√£o de Tom de voz:")
        
        # Bot√£o para gerar o briefing
        if st.button("üîÑ Gerar Briefing Completo", type="primary"):
            with st.spinner('Construindo briefing profissional...'):
                try:
                    # Remove campos None (n√£o selecionados)
                    campos_briefing['especificos'] = {k: v for k, v in campos_briefing['especificos'].items() if v is not None}
                    
                    # Construir o prompt com todas as informa√ß√µes coletadas
                    prompt_parts = [
                        f"# BRIEFING {tipo_briefing.upper()}",
                        f"**Projeto:** {campos_briefing['basicos']['nome_projeto']}",
                        f"**Respons√°vel:** {campos_briefing['basicos']['responsavel']}",
                        f"**Data de Entrega:** {campos_briefing['basicos']['data_entrega']}",
                        "",
                        "## 1. INFORMA√á√ïES B√ÅSICAS",
                        f"**Objetivo Geral:** {campos_briefing['basicos']['objetivo_geral']}",
                        "",
                        "## 2. INFORMA√á√ïES ESPEC√çFICAS"
                    ]
                    
                    # Adicionar campos espec√≠ficos
                    for campo, valor in campos_briefing['especificos'].items():
                        if isinstance(valor, list):
                            valor = ", ".join(valor)
                        prompt_parts.append(f"**{campo.replace('_', ' ').title()}:** {valor}")
                    
                    prompt = "\n".join(prompt_parts)
                    resposta = modelo_texto.generate_content('Gere o seguinte documento de Briefing EM PORTUGU√äS BRASILEIRO ' + prompt)
                    
                    # Salvar no MongoDB
                    if mongo_connected:
                        briefing_data = {
                            "tipo": tipo_briefing,
                            "categoria": categoria,
                            "nome_projeto": campos_briefing['basicos']['nome_projeto'],
                            "responsavel": campos_briefing['basicos']['responsavel'],
                            "data_criacao": datetime.datetime.now(),
                            "data_entrega": campos_briefing['basicos']['data_entrega'],
                            "conteudo": resposta.text,
                            "campos_preenchidos": campos_briefing,
                            "observacoes": obs,
                        }
                        collection_briefings.insert_one(briefing_data)

                    st.subheader(f"Briefing {tipo_briefing} - {campos_briefing['basicos']['nome_projeto']}")
                    st.markdown(resposta.text)
                                
                    st.download_button(
                        label="üì• Download do Briefing",
                        data=resposta.text,
                        file_name=f"briefing_{tipo_briefing.lower().replace(' ', '_')}_{campos_briefing['basicos']['nome_projeto'].lower().replace(' ', '_')}.txt",
                        mime="text/plain"
                    )
                        
                except Exception as e:
                    st.error(f"Erro ao gerar briefing: {str(e)}")

    with tab_saved:
        st.subheader("Briefings Salvos")
        
        if mongo_connected:
            # Filtros
            col_filtro1, col_filtro2 = st.columns(2)
            with col_filtro1:
                filtro_categoria = st.selectbox("Filtrar por categoria:", ["Todos"] + list(tipos_briefing.keys()), key="filtro_cat")
            with col_filtro2:
                if filtro_categoria == "Todos":
                    tipos_disponiveis = [item for sublist in tipos_briefing.values() for item in sublist]
                    filtro_tipo = st.selectbox("Filtrar por tipo:", ["Todos"] + tipos_disponiveis, key="filtro_tipo")
                else:
                    filtro_tipo = st.selectbox("Filtrar por tipo:", ["Todos"] + tipos_briefing[filtro_categoria], key="filtro_tipo")
            
            # Construir query para MongoDB
            query = {}
            if filtro_categoria != "Todos":
                query["categoria"] = filtro_categoria
            if filtro_tipo != "Todos":
                query["tipo"] = filtro_tipo
            
            # Buscar briefings
            briefings_salvos = list(collection_briefings.find(query).sort("data_criacao", -1).limit(50))
            
            if not briefings_salvos:
                st.info("Nenhum briefing encontrado com os filtros selecionados")
            else:
                for briefing in briefings_salvos:
                    with st.expander(f"{briefing['tipo']} - {briefing['nome_projeto']} ({briefing['data_criacao'].strftime('%d/%m/%Y')})"):
                        st.markdown(briefing['conteudo'])
                        
                        col1, col2 = st.columns([4, 1])
                        with col1:
                            st.download_button(
                                label="üì• Download",
                                data=briefing['conteudo'],
                                file_name=f"briefing_{briefing['tipo'].lower().replace(' ', '_')}_{briefing['nome_projeto'].lower().replace(' ', '_')}.txt",
                                mime="text/plain",
                                key=f"dl_{briefing['_id']}"
                            )
                        with col2:
                            if st.button("üóëÔ∏è", key=f"del_{briefing['_id']}"):
                                collection_briefings.delete_one({"_id": briefing['_id']})
                                st.rerun()

# ========== ABA: GERA√á√ÉO DE CONTE√öDO BLOG AGR√çCOLA ==========
with tab_blog:
    st.title("üå± Gerador de Blog Posts Agr√≠colas")
    st.markdown("Crie conte√∫dos especializados para o agroneg√≥cio seguindo a estrutura profissional")

    # Conex√£o com MongoDB
    try:
        client_mongo = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
        db = client_mongo['blog_posts_agricolas']
        collection_posts = db['posts_gerados']
        collection_briefings = db['briefings']
        collection_kbf = db['kbf_produtos']
        mongo_connected_blog = True
    except Exception as e:
        st.error(f"Erro na conex√£o com MongoDB: {str(e)}")
        mongo_connected_blog = False

    # Fun√ß√µes para o banco de dados
    def salvar_post(titulo, cultura, editoria, mes_publicacao, objetivo_post, url, texto_gerado, palavras_chave, palavras_proibidas, tom_voz, estrutura, palavras_contagem, meta_title, meta_descricao, linha_fina):
        if mongo_connected_blog:
            documento = {
                "id": str(uuid.uuid4()),
                "titulo": titulo,
                "cultura": cultura,
                "editoria": editoria,
                "mes_publicacao": mes_publicacao,
                "objetivo_post": objetivo_post,
                "url": url,
                "texto_gerado": texto_gerado,
                "palavras_chave": palavras_chave,
                "palavras_proibidas": palavras_proibidas,
                "tom_voz": tom_voz,
                "estrutura": estrutura,
                "palavras_contagem": palavras_contagem,
                "meta_title": meta_title,
                "meta_descricao": meta_descricao,
                "linha_fina": linha_fina,
                "data_criacao": datetime.now(),
                "versao": "2.0"
            }
            collection_posts.insert_one(documento)
            return True
        return False

    def carregar_kbf_produtos():
        if mongo_connected_blog:
            try:
                kbf_docs = list(collection_kbf.find({}))
                return kbf_docs
            except:
                return []
        return []

    def salvar_briefing(briefing_data):
        if mongo_connected_blog:
            documento = {
                "id": str(uuid.uuid4()),
                "briefing": briefing_data,
                "data_criacao": datetime.now()
            }
            collection_briefings.insert_one(documento)
            return True
        return False

    def carregar_posts_anteriores():
        if mongo_connected_blog:
            try:
                posts = list(collection_posts.find({}).sort("data_criacao", -1).limit(10))
                return posts
            except:
                return []
        return []

    # Fun√ß√£o para processar transcri√ß√µes
    def processar_transcricoes(arquivos):
        transcricoes = []
        for arquivo in arquivos:
            if arquivo is not None:
                st.info(f"Processando transcri√ß√£o de: {arquivo.name}")
                transcricoes.append(f"Conte√∫do transcrito de {arquivo.name}")
        return "\n\n".join(transcricoes)

    # Regras base do sistema
    regras_base = '''
    **REGRAS DE REPLICA√á√ÉO - ESTRUTURA PROFISSIONAL:**

    **1. ESTRUTURA DO DOCUMENTO:**
    - T√≠tulo principal impactante e com chamada para a√ß√£o (m√°x 65 caracteres)
    - Linha fina resumindo o conte√∫do (m√°x 200 caracteres)
    - Meta-title otimizado para SEO (m√°x 60 caracteres)
    - Meta-descri√ß√£o atrativa (m√°x 155 caracteres)
    - Introdu√ß√£o contextualizando o problema e impacto
    - Se√ß√£o de Problema: Detalhamento t√©cnico dos desafios
    - Se√ß√£o de Solu√ß√£o Gen√©rica: Estrat√©gia geral de manejo
    - Se√ß√£o de Solu√ß√£o Espec√≠fica: Produto como resposta aos desafios
    - Conclus√£o com refor√ßo de compromisso e chamada para a√ß√£o
    - Assinatura padr√£o da empresa

    **2. LINGUAGEM E TOM:**
    - {tom_voz}
    - Linguagem {nivel_tecnico} t√©cnica e profissional
    - Uso de terminologia espec√≠fica do agroneg√≥cio
    - Persuas√£o baseada em benef√≠cios e solu√ß√£o de problemas
    - Evitar repeti√ß√£o de informa√ß√µes entre se√ß√µes

    **3. ELEMENTOS T√âCNICOS OBRIGAT√ìRIOS:**
    - Nomes cient√≠ficos entre par√™nteses quando aplic√°vel
    - Cita√ß√£o EXPL√çCITA de fontes confi√°veis (Embrapa, universidades, etc.) mencionando o √≥rg√£o/institui√ß√£o no corpo do texto
    - Destaque para termos t√©cnicos-chave e nomes de produtos
    - Descri√ß√£o detalhada de danos e benef√≠cios
    - Dados concretos e informa√ß√µes mensur√°veis com refer√™ncias espec√≠ficas

    **4. FORMATA√á√ÉO E ESTRUTURA:**
    - Par√°grafos curtos (m√°ximo 4-5 linhas cada)
    - Listas de t√≥picos com no m√°ximo 5 itens cada
    - Evitar blocos extensos de texto
    - Usar subt√≠tulos para quebrar o conte√∫do

    **5. RESTRI√á√ïES:**
    - Palavras proibidas: {palavras_proibidas}
    - Evitar vi√©s comercial expl√≠cito
    - Manter abordagem {abordagem_problema}
    - N√∫mero de palavras: {numero_palavras} (¬±5%)
    - N√ÉO INVENTAR SOLU√á√ïES ou informa√ß√µes n√£o fornecidas
    - Seguir EXATAMENTE o formato e informa√ß√µes do briefing
    '''

    with st.sidebar:
        st.header("üìã Configura√ß√µes Principais")
        
        # Modo de entrada - Briefing ou Campos Individuais
        modo_entrada = st.radio("Modo de Entrada:", ["Campos Individuais", "Briefing Completo"])
        
        # Controle de palavras
        numero_palavras = st.slider("N√∫mero de Palavras:", min_value=300, max_value=2500, value=1500, step=100)
        st.info(f"Meta: {numero_palavras} palavras (¬±5%)")
        
        # Palavras-chave
        st.subheader("üîë Palavras-chave")
        palavra_chave_principal = st.text_input("Palavra-chave Principal:")
        palavras_chave_secundarias = st.text_area("Palavras-chave Secund√°rias (separadas por v√≠rgula):")
        
        # Configura√ß√µes de estilo
        st.subheader("üé® Configura√ß√µes de Estilo")
        tom_voz = st.selectbox("Tom de Voz:", ["Jornal√≠stico", "Especialista T√©cnico", "Educativo", "Persuasivo"])
        nivel_tecnico = st.selectbox("N√≠vel T√©cnico:", ["B√°sico", "Intermedi√°rio", "Avan√ßado"])
        abordagem_problema = st.text_area("Aborde o problema de tal forma que:", "seja claro, t√©cnico e focando na solu√ß√£o pr√°tica para o produtor")
        
        # Restri√ß√µes
        st.subheader("üö´ Restri√ß√µes")
        palavras_proibidas = st.text_area("Palavras Proibidas (separadas por v√≠rgula):", "melhor, n√∫mero 1, l√≠der, insuper√°vel, inven√ß√£o, inventado, solu√ß√£o m√°gica")
        
        # Estrutura do texto
        st.subheader("üìê Estrutura do Texto")
        estrutura_opcoes = st.multiselect("Se√ß√µes do Post:", 
                                         ["Introdu√ß√£o", "Problema", "Solu√ß√£o Gen√©rica", "Solu√ß√£o Espec√≠fica", 
                                          "Benef√≠cios", "Implementa√ß√£o Pr√°tica", "Conclus√£o", "Fontes"],
                                         default=["Introdu√ß√£o", "Problema", "Solu√ß√£o Gen√©rica", "Solu√ß√£o Espec√≠fica", "Conclus√£o"])
        
        # KBF de Produtos
        st.subheader("üì¶ KBF de Produtos")
        kbf_produtos = carregar_kbf_produtos()
        if kbf_produtos:
            produtos_disponiveis = [prod['nome'] for prod in kbf_produtos]
            produto_selecionado = st.selectbox("Selecionar Produto do KBF:", ["Nenhum"] + produtos_disponiveis)
            if produto_selecionado != "Nenhum":
                produto_info = next((prod for prod in kbf_produtos if prod['nome'] == produto_selecionado), None)
                if produto_info:
                    st.info(f"**KBF Fixo:** {produto_info.get('caracteristicas', 'Informa√ß√µes do produto')}")

    # √Årea principal baseada no modo de entrada
    if modo_entrada == "Campos Individuais":
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("üìù Informa√ß√µes B√°sicas")
            titulo_blog = st.text_input("T√≠tulo do Blog:", "Proteja sua soja de nematoides e pragas de solo")
            cultura = st.text_input("Cultura:", "Soja")
            editoria = st.text_input("Editoria:", "Manejo e Prote√ß√£o")
            mes_publicacao = st.text_input("M√™s de Publica√ß√£o:", "08/2025")
            objetivo_post = st.text_area("Objetivo do Post:", "Explicar a import√¢ncia do manejo de nematoides e apresentar solu√ß√µes via tratamento de sementes")
            url = st.text_input("URL:", "/manejo-e-protecao/proteja-sua-soja-de-nematoides")
            
            st.header("üîß Conte√∫do T√©cnico")
            problema_principal = st.text_area("Problema Principal/Contexto:", "Solos compactados e com palhada de milho t√™m favorecido a explos√£o populacional de nematoides")
            pragas_alvo = st.text_area("Pragas/Alvo Principal:", "Nematoide das galhas (Meloidogyne incognita), Nematoide de cisto (Heterodera glycines)")
            danos_causados = st.text_area("Danos Causados:", "Forma√ß√£o de galhas nas ra√≠zes que impedem a absor√ß√£o de √°gua e nutrientes")
            solucao_generica = st.text_area("Solu√ß√£o Gen√©rica:", "Ado√ß√£o de um manejo integrado com gen√©tica resistente, rota√ß√£o de culturas e tratamento de sementes")
        
        with col2:
            st.header("üè≠ Informa√ß√µes da Empresa")
            nome_empresa = st.text_input("Nome da Empresa/Marca:")
            nome_central = st.text_input("Nome da Central de Conte√∫dos:")
            
            st.header("üí° Solu√ß√µes e Produtos")
            nome_produto = st.text_input("Nome do Produto:")
            principio_ativo = st.text_input("Princ√≠pio Ativo/Diferencial:")
            beneficios_produto = st.text_area("Benef√≠cios do Produto:")
            espectro_acao = st.text_area("Espectro de A√ß√£o:")
            
            st.header("üéØ Diretrizes Espec√≠ficas")
            diretrizes_usuario = st.text_area("Diretrizes Adicionais:", 
                                            "N√ÉO INVENTE SOLU√á√ïES. Use apenas informa√ß√µes fornecidas. Incluir dicas pr√°ticas para implementa√ß√£o no campo. Manter linguagem acess√≠vel mas t√©cnica.")
            fontes_pesquisa = st.text_area("Fontes para Pesquisa/Refer√™ncia (cite √≥rg√£os espec√≠ficos):", 
                                         "Embrapa Soja, Universidade de S√£o Paulo - ESALQ, Instituto Biol√≥gico de S√£o Paulo, Artigos t√©cnicos sobre nematoides")
            
            # Upload de M√öLTIPLOS arquivos estrat√©gicos
            arquivos_estrategicos = st.file_uploader("üìé Upload de M√∫ltiplos Arquivos Estrat√©gicos", 
                                                   type=['txt', 'pdf', 'docx', 'mp3', 'wav', 'mp4', 'mov'], 
                                                   accept_multiple_files=True)

    else:  # Modo Briefing
        st.header("üìÑ Briefing Completo")
        
        st.warning("""
        **ATEN√á√ÉO:** Para conte√∫dos t√©cnicos complexos, 
        recomenda-se usar o modo "Campos Individuais" para melhor controle da qualidade.
        """)
        
        briefing_texto = st.text_area("Cole aqui o briefing completo:", height=300,
                                     placeholder="""EXEMPLO DE BRIEFING:
    T√≠tulo: Controle Eficiente de Nematoides na Soja
    Cultura: Soja
    Problema: Aumento da popula√ß√£o de nematoides em solos com palhada de milho
    Objetivo: Educar produtores sobre manejo integrado
    Produto: NemaControl
    P√∫blico-alvo: Produtores de soja t√©cnica
    Tom: T√©cnico-jornal√≠stico
    Palavras-chave: nematoide, soja, tratamento sementes, manejo integrado

    IMPORTANTE: N√ÉO INVENTE SOLU√á√ïES. Use apenas informa√ß√µes fornecidas aqui.""")
        
        if briefing_texto:
            if st.button("Processar Briefing"):
                salvar_briefing(briefing_texto)
                st.success("Briefing salvo no banco de dados!")

    # Configura√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Configura√ß√µes Avan√ßadas"):
        col_av1, col_av2 = st.columns(2)
        
        with col_av1:
            st.subheader("Opcionais")
            usar_pesquisa_web = st.checkbox("üîç Habilitar Pesquisa Web", value=False)
            gerar_blocos_dinamicos = st.checkbox("üîÑ Gerar Blocos Dinamicamente", value=True)
            incluir_fontes = st.checkbox("üìö Incluir Refer√™ncias de Fontes", value=True)
            incluir_assinatura = st.checkbox("‚úçÔ∏è Incluir Assinatura Padr√£o", value=True)
            
        with col_av2:
            st.subheader("Controles de Qualidade")
            evitar_repeticao = st.slider("N√≠vel de Evitar Repeti√ß√£o:", 1, 10, 8)
            profundidade_conteudo = st.selectbox("Profundidade do Conte√∫do:", ["Superficial", "Moderado", "Detalhado", "Especializado"])
            
            # Configura√ß√µes de formata√ß√£o
            st.subheader("üìê Formata√ß√£o")
            max_paragrafos = st.slider("M√°ximo de linhas por par√°grafo:", 3, 8, 5)
            max_lista_itens = st.slider("M√°ximo de itens por lista:", 3, 8, 5)
            
            # M√öLTIPLOS arquivos para transcri√ß√£o
            st.subheader("üé§ Transcri√ß√£o de M√≠dia")
            arquivos_midia = st.file_uploader("√Åudios/V√≠deos para Transcri√ß√£o (m√∫ltiplos)", 
                                            type=['mp3', 'wav', 'mp4', 'mov'], 
                                            accept_multiple_files=True)

    # Metadados para SEO
    st.header("üîç Metadados para SEO")
    col_meta1, col_meta2 = st.columns(2)
    
    with col_meta1:
        meta_title = st.text_input("Meta Title (m√°x 60 caracteres):", 
                                 max_chars=60,
                                 help="T√≠tulo para SEO - aparecer√° nos resultados de busca")
        st.info(f"Caracteres: {len(meta_title)}/60")
        
        linha_fina = st.text_area("Linha Fina (m√°x 200 caracteres):",
                                max_chars=200,
                                help="Resumo executivo que aparece abaixo do t√≠tulo")
        st.info(f"Caracteres: {len(linha_fina)}/200")
    
    with col_meta2:
        meta_descricao = st.text_area("Meta Descri√ß√£o (m√°x 155 caracteres):",
                                    max_chars=155,
                                    help="Descri√ß√£o que aparece nos resultados de busca")
        st.info(f"Caracteres: {len(meta_descricao)}/155")

    # √Årea de gera√ß√£o
    st.header("üîÑ Gera√ß√£o do Conte√∫do")
    
    if st.button("üöÄ Gerar Blog Post", type="primary", use_container_width=True):
        with st.spinner("Gerando conte√∫do... Isso pode levar alguns minutos"):
            try:
                # Processar transcri√ß√µes se houver arquivos
                transcricoes_texto = ""
                if 'arquivos_midia' in locals() and arquivos_midia:
                    transcricoes_texto = processar_transcricoes(arquivos_midia)
                    st.info(f"Processadas {len(arquivos_midia)} transcri√ß√£o(√µes)")
                
                # Construir prompt personalizado
                regras_personalizadas = regras_base.format(
                    tom_voz=tom_voz,
                    nivel_tecnico=nivel_tecnico,
                    palavras_proibidas=palavras_proibidas,
                    abordagem_problema=abordagem_problema,
                    numero_palavras=numero_palavras
                )
                
                prompt_final = f"""
                **INSTRU√á√ïES PARA CRIA√á√ÉO DE BLOG POST AGR√çCOLA:**
                
                {regras_personalizadas}
                
                **INFORMA√á√ïES ESPEC√çFICAS:**
                - T√≠tulo: {titulo_blog if 'titulo_blog' in locals() else 'A definir'}
                - Cultura: {cultura if 'cultura' in locals() else 'A definir'}
                - Palavra-chave Principal: {palavra_chave_principal}
                - Palavras-chave Secund√°rias: {palavras_chave_secundarias}
                
                **METADADOS:**
                - Meta Title: {meta_title}
                - Meta Description: {meta_descricao}
                - Linha Fina: {linha_fina}
                
                **CONFIGURA√á√ïES DE FORMATA√á√ÉO:**
                - Par√°grafos m√°ximos: {max_paragrafos} linhas
                - Listas m√°ximas: {max_lista_itens} itens
                - Estrutura: {', '.join(estrutura_opcoes)}
                - Profundidade: {profundidade_conteudo}
                - Evitar repeti√ß√£o: N√≠vel {evitar_repeticao}/10
                
                **DIRETRIZES CR√çTICAS:**
                - N√ÉO INVENTE SOLU√á√ïES OU INFORMA√á√ïES
                - Use APENAS dados fornecidos no briefing
                - Cite fontes espec√≠ficas no corpo do texto
                - Mantenha par√°grafos e listas CURTOS
                
                **CONTE√öDO DE TRANSCRI√á√ïES:**
                {transcricoes_texto if transcricoes_texto else 'Nenhuma transcri√ß√£o fornecida'}
                
                **DIRETRIZES ADICIONAIS:** {diretrizes_usuario if 'diretrizes_usuario' in locals() else 'Nenhuma'}
                
                Gere um conte√∫do {profundidade_conteudo.lower()} com EXATAMENTE {numero_palavras} palavras (¬±5%).
                """
                
                response = modelo_texto.generate_content(prompt_final)
                
                texto_gerado = response.text
                
                # Verificar contagem de palavras
                palavras_count = len(texto_gerado.split())
                st.info(f"üìä Contagem de palavras geradas: {palavras_count} (meta: {numero_palavras})")
                
                if abs(palavras_count - numero_palavras) > numero_palavras * 0.1:
                    st.warning("‚ö†Ô∏è A contagem de palavras est√° significativamente diferente da meta")
                
                # Salvar no MongoDB
                if salvar_post(
                    titulo_blog if 'titulo_blog' in locals() else "T√≠tulo gerado",
                    cultura if 'cultura' in locals() else "Cultura n√£o especificada",
                    editoria if 'editoria' in locals() else "Editoria geral",
                    mes_publicacao if 'mes_publicacao' in locals() else datetime.now().strftime("%m/%Y"),
                    objetivo_post if 'objetivo_post' in locals() else "Objetivo n√£o especificado",
                    url if 'url' in locals() else "/",
                    texto_gerado,
                    f"{palavra_chave_principal}, {palavras_chave_secundarias}",
                    palavras_proibidas,
                    tom_voz,
                    ', '.join(estrutura_opcoes),
                    palavras_count,
                    meta_title,
                    meta_descricao,
                    linha_fina
                ):
                    st.success("‚úÖ Post gerado e salvo no banco de dados!")
                
                st.subheader("üìù Conte√∫do Gerado")
                st.markdown(texto_gerado)
                
                st.download_button(
                    "üíæ Baixar Post",
                    data=texto_gerado,
                    file_name=f"blog_post_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain"
                )
                
            except Exception as e:
                st.error(f"Erro na gera√ß√£o: {str(e)}")

    # Banco de textos gerados
    with st.expander("üìö Banco de Textos Gerados"):
        posts_anteriores = carregar_posts_anteriores()
        if posts_anteriores:
            for post in posts_anteriores:
                with st.expander(f"{post.get('titulo', 'Sem t√≠tulo')} - {post.get('data_criacao', '').strftime('%d/%m/%Y')}"):
                    st.write(f"**Cultura:** {post.get('cultura', 'N/A')}")
                    st.write(f"**Palavras:** {post.get('palavras_contagem', 'N/A')}")
                    st.text_area("Conte√∫do:", value=post.get('texto_gerado', ''), height=200, key=post['id'])
        else:
            st.info("Nenhum post encontrado no banco de dados.")

# ========== ABA: GERA√á√ÉO DE CONTE√öDO ==========
with tab_conteudo:
    st.header("‚ú® Gera√ß√£o de Conte√∫do")
    
    # Interface similar √† aba de blog, mas mais gen√©rica
    st.info("Esta funcionalidade est√° em desenvolvimento. Use a aba de Blog Agr√≠cola para conte√∫dos especializados.")

# ========== ABA: REVIS√ÉO ORTOGR√ÅFICA ==========
with tab_revisao_ortografica:
    st.header("üìù Revis√£o Ortogr√°fica")
    
    texto_para_revisao = st.text_area("Cole o texto que deseja revisar:", height=300)
    
    if st.button("üîç Realizar Revis√£o Ortogr√°fica", type="primary"):
        if texto_para_revisao:
            with st.spinner("Revisando texto..."):
                try:
                    prompt = f"""
                    Fa√ßa uma revis√£o ortogr√°fica e gramatical completa do seguinte texto:
                    
                    {texto_para_revisao}
                    
                    Forne√ßa:
                    1. Texto revisado com corre√ß√µes aplicadas
                    2. Lista de corre√ß√µes realizadas
                    3. Sugest√µes de melhorias de estilo
                    """
                    
                    resposta = modelo_texto.generate_content(prompt)
                    st.subheader("üìã Resultado da Revis√£o")
                    st.markdown(resposta.text)
                    
                except Exception as e:
                    st.error(f"Erro na revis√£o: {str(e)}")
        else:
            st.warning("Por favor, cole um texto para revis√£o.")

# ========== ABA: REVIS√ÉO T√âCNICA ==========
with tab_revisao_tecnica:
    st.header("üîß Revis√£o T√©cnica")
    
    texto_tecnico = st.text_area("Cole o conte√∫do t√©cnico para revis√£o:", height=300)
    area_tecnica = st.selectbox("√Årea T√©cnica:", 
                               ["Agricultura", "Tecnologia", "Engenharia", "Medicina", "Outra"])
    
    if st.button("üîç Realizar Revis√£o T√©cnica", type="primary"):
        if texto_tecnico:
            with st.spinner("Realizando revis√£o t√©cnica..."):
                try:
                    prompt = f"""
                    Fa√ßa uma revis√£o t√©cnica especializada em {area_tecnica} do seguinte conte√∫do:
                    
                    {texto_tecnico}
                    
                    Verifique:
                    1. Precis√£o t√©cnica das informa√ß√µes
                    2. Consist√™ncia de terminologia
                    3. Clareza nas explica√ß√µes
                    4. Atualiza√ß√£o das refer√™ncias
                    5. Sugest√µes de melhorias t√©cnicas
                    """
                    
                    resposta = modelo_texto.generate_content(prompt)
                    st.subheader("üìã Resultado da Revis√£o T√©cnica")
                    st.markdown(resposta.text)
                    
                except Exception as e:
                    st.error(f"Erro na revis√£o t√©cnica: {str(e)}")
        else:
            st.warning("Por favor, cole um conte√∫do t√©cnico para revis√£o.")

# ========== ABA: BRIEFING T√âCNICO ==========
with tab_briefing_tecnico:
    st.header("‚öôÔ∏è Gera√ß√£o de Briefing T√©cnico")
    
    st.info("Esta funcionalidade est√° em desenvolvimento. Use a aba de Gera√ß√£o de Briefing para criar briefings completos.")

# ========== ABA: OTIMIZA√á√ÉO DE CONTE√öDO ==========
with tab_otimizacao:
    st.header("üöÄ Otimiza√ß√£o de Conte√∫do")
    
    texto_para_otimizar = st.text_area("Cole o conte√∫do para otimiza√ß√£o:", height=300)
    tipo_otimizacao = st.selectbox("Tipo de Otimiza√ß√£o:", 
                                  ["SEO", "Engajamento", "Convers√£o", "Clareza"])
    
    if st.button("üöÄ Otimizar Conte√∫do", type="primary"):
        if texto_para_otimizar:
            with st.spinner("Otimizando conte√∫do..."):
                try:
                    prompt = f"""
                    Otimize o seguinte conte√∫do para {tipo_otimizacao}:
                    
                    {texto_para_otimizar}
                    
                    Forne√ßa:
                    1. Vers√£o otimizada do conte√∫do
                    2. Explica√ß√£o das otimiza√ß√µes realizadas
                    3. M√©tricas esperadas de melhoria
                    """
                    
                    resposta = modelo_texto.generate_content(prompt)
                    st.subheader("üìä Conte√∫do Otimizado")
                    st.markdown(resposta.text)
                    
                except Exception as e:
                    st.error(f"Erro na otimiza√ß√£o: {str(e)}")
        else:
            st.warning("Por favor, cole um conte√∫do para otimiza√ß√£o.")

# --- Estiliza√ß√£o ---
st.markdown("""
<style>
    .stChatMessage {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    [data-testid="stChatMessageContent"] {
        font-size: 1rem;
    }
    div[data-testid="stTabs"] {
        margin-top: -30px;
    }
    .segment-indicator {
        background-color: #f0f2f6;
        padding: 0.5rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border-left: 4px solid #4CAF50;
    }
</style>
""", unsafe_allow_html=True)
