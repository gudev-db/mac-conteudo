import streamlit as st
import io
import google.generativeai as genai
from PIL import Image
import requests
import datetime
import os
from pymongo import MongoClient
from bson import ObjectId
import json
import hashlib
from google.genai import types
import uuid
from datetime import datetime

# Configura√ß√£o inicial
st.set_page_config(
    layout="wide",
    page_title="Conte√∫do")

# --- Sistema de Autentica√ß√£o ---
def make_hashes(password):
    return hashlib.sha256(str.encode(password)).hexdigest()

def check_hashes(password, hashed_text):
    return make_hashes(password) == hashed_text

# Dados de usu√°rio (em produ√ß√£o, isso deve vir de um banco de dados seguro)
users = {
    "admin": make_hashes("senha1234"),  # admin/senha1234
    "user1": make_hashes("password1"),  # user1/password1
    "user2": make_hashes("password2")   # user2/password2
}

def login():
    """Formul√°rio de login"""
    st.title("Macfor Conte√∫do - Login")
    
    with st.form("login_form"):
        username = st.text_input("Usu√°rio")
        password = st.text_input("Senha", type="password")
        submit_button = st.form_submit_button("Login")
        
        if submit_button:
            if username in users and check_hashes(password, users[username]):
                st.session_state.logged_in = True
                st.session_state.user = username
                st.success("Login realizado com sucesso!")
                st.rerun()
            else:
                st.error("Usu√°rio ou senha incorretos")

# Verificar se o usu√°rio est√° logado
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    login()
    st.stop()

# --- CONEX√ÉO MONGODB (ap√≥s login) ---
client = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
db = client['agentes_personalizados']
collection_agentes = db['agentes']
collection_conversas = db['conversas']

# Configura√ß√£o da API do Gemini
gemini_api_key = os.getenv("GEM_API_KEY")
if not gemini_api_key:
    st.error("GEMINI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
    st.stop()

genai.configure(api_key=gemini_api_key)
modelo_vision = genai.GenerativeModel("gemini-2.5-flash", generation_config={"temperature": 0.1})
modelo_texto = genai.GenerativeModel("gemini-2.5-flash")

# Configura√ß√£o da API do Perplexity
perp_api_key = os.getenv("PERP_API_KEY")
if not perp_api_key:
    st.error("PERP_API_KEY n√£o encontrada nas vari√°veis de ambiente")

# --- Fun√ß√µes CRUD para Agentes ---
def criar_agente(nome, system_prompt, base_conhecimento, comments, planejamento, categoria, agente_mae_id=None, herdar_elementos=None):
    """Cria um novo agente no MongoDB"""
    agente = {
        "nome": nome,
        "system_prompt": system_prompt,
        "base_conhecimento": base_conhecimento,
        "comments": comments,
        "planejamento": planejamento,
        "categoria": categoria,
        "agente_mae_id": agente_mae_id,
        "herdar_elementos": herdar_elementos or [],
        "data_criacao": datetime.datetime.now(),
        "ativo": True
    }
    result = collection_agentes.insert_one(agente)
    return result.inserted_id

def listar_agentes():
    """Retorna todos os agentes ativos"""
    return list(collection_agentes.find({"ativo": True}).sort("data_criacao", -1))

def listar_agentes_para_heranca(agente_atual_id=None):
    """Retorna todos os agentes ativos que podem ser usados como m√£e"""
    query = {"ativo": True}
    if agente_atual_id:
        # Excluir o pr√≥prio agente da lista de op√ß√µes para evitar auto-heran√ßa
        if isinstance(agente_atual_id, str):
            agente_atual_id = ObjectId(agente_atual_id)
        query["_id"] = {"$ne": agente_atual_id}
    return list(collection_agentes.find(query).sort("data_criacao", -1))

def obter_agente(agente_id):
    """Obt√©m um agente espec√≠fico pelo ID"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agentes.find_one({"_id": agente_id})

def atualizar_agente(agente_id, nome, system_prompt, base_conhecimento, comments, planejamento, categoria, agente_mae_id=None, herdar_elementos=None):
    """Atualiza um agente existente"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agentes.update_one(
        {"_id": agente_id},
        {
            "$set": {
                "nome": nome,
                "system_prompt": system_prompt,
                "base_conhecimento": base_conhecimento,
                "comments": comments,
                "planejamento": planejamento,
                "categoria": categoria,
                "agente_mae_id": agente_mae_id,
                "herdar_elementos": herdar_elementos or [],
                "data_atualizacao": datetime.datetime.now()
            }
        }
    )

def desativar_agente(agente_id):
    """Desativa um agente (soft delete)"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agentes.update_one(
        {"_id": agente_id},
        {"$set": {"ativo": False, "data_desativacao": datetime.datetime.now()}}
    )

def obter_agente_com_heranca(agente_id):
    """Obt√©m um agente com os elementos herdados aplicados"""
    agente = obter_agente(agente_id)
    if not agente or not agente.get('agente_mae_id'):
        return agente
    
    agente_mae = obter_agente(agente['agente_mae_id'])
    if not agente_mae:
        return agente
    
    elementos_herdar = agente.get('herdar_elementos', [])
    agente_completo = agente.copy()
    
    for elemento in elementos_herdar:
        if elemento == 'system_prompt' and not agente_completo.get('system_prompt'):
            agente_completo['system_prompt'] = agente_mae.get('system_prompt', '')
        elif elemento == 'base_conhecimento' and not agente_completo.get('base_conhecimento'):
            agente_completo['base_conhecimento'] = agente_mae.get('base_conhecimento', '')
        elif elemento == 'comments' and not agente_completo.get('comments'):
            agente_completo['comments'] = agente_mae.get('comments', '')
        elif elemento == 'planejamento' and not agente_completo.get('planejamento'):
            agente_completo['planejamento'] = agente_mae.get('planejamento', '')
    
    return agente_completo

def salvar_conversa(agente_id, mensagens, segmentos_utilizados=None):
    """Salva uma conversa no hist√≥rico"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    conversa = {
        "agente_id": agente_id,
        "mensagens": mensagens,
        "segmentos_utilizados": segmentos_utilizados,
        "data_criacao": datetime.datetime.now()
    }
    return collection_conversas.insert_one(conversa)

def obter_conversas(agente_id, limite=10):
    """Obt√©m o hist√≥rico de conversas de um agente"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return list(collection_conversas.find(
        {"agente_id": agente_id}
    ).sort("data_criacao", -1).limit(limite))

# --- Fun√ß√£o para construir contexto com segmentos selecionados ---
def construir_contexto(agente, segmentos_selecionados, historico_mensagens=None):
    """Constr√≥i o contexto com base nos segmentos selecionados"""
    contexto = ""
    
    if "system_prompt" in segmentos_selecionados and agente.get('system_prompt'):
        contexto += f"### INSTRU√á√ïES DO SISTEMA ###\n{agente['system_prompt']}\n\n"
    
    if "base_conhecimento" in segmentos_selecionados and agente.get('base_conhecimento'):
        contexto += f"### BASE DE CONHECIMENTO ###\n{agente['base_conhecimento']}\n\n"
    
    if "comments" in segmentos_selecionados and agente.get('comments'):
        contexto += f"### COMENT√ÅRIOS DO CLIENTE ###\n{agente['comments']}\n\n"
    
    if "planejamento" in segmentos_selecionados and agente.get('planejamento'):
        contexto += f"### PLANEJAMENTO ###\n{agente['planejamento']}\n\n"
    
    # Adicionar hist√≥rico se fornecido
    if historico_mensagens:
        contexto += "### HIST√ìRICO DA CONVERSA ###\n"
        for msg in historico_mensagens:
            contexto += f"{msg['role']}: {msg['content']}\n"
        contexto += "\n"
    
    contexto += "### RESPOSTA ATUAL ###\nassistant:"
    
    return contexto

# --- Configura√ß√£o de Autentica√ß√£o de Administrador ---
def check_admin_password():
    """Retorna True se o usu√°rio fornecer a senha de admin correta."""
    
    def admin_password_entered():
        """Verifica se a senha de admin est√° correta."""
        if st.session_state["admin_password"] == "senha123":
            st.session_state["admin_password_correct"] = True
            st.session_state["admin_user"] = "admin"
            del st.session_state["admin_password"]
        else:
            st.session_state["admin_password_correct"] = False

    if "admin_password_correct" not in st.session_state:
        # Mostra o input para senha de admin
        st.text_input(
            "Senha de Administrador", 
            type="password", 
            on_change=admin_password_entered, 
            key="admin_password"
        )
        return False
    elif not st.session_state["admin_password_correct"]:
        # Senha incorreta, mostra input + erro
        st.text_input(
            "Senha de Administrador", 
            type="password", 
            on_change=admin_password_entered, 
            key="admin_password"
        )
        st.error("üòï Senha de administrador incorreta")
        return False
    else:
        # Senha correta
        return True

# --- SELE√á√ÉO DE AGENTE NA PARTE SUPERIOR ---
st.sidebar.title(f"ü§ñ Bem-vindo, {st.session_state.user}!")

# Bot√£o de logout na sidebar
if st.sidebar.button("üö™ Sair", key="logout_btn"):
    for key in ["logged_in", "user", "admin_password_correct", "admin_user"]:
        if key in st.session_state:
            del st.session_state[key]
    st.rerun()

# Seletor de Agente na parte superior (acima das abas)
st.header("ü§ñ Seletor de Agente")

# Inicializar estado da sess√£o para agente selecionado
if "agente_selecionado" not in st.session_state:
    st.session_state.agente_selecionado = None
if "segmentos_selecionados" not in st.session_state:
    st.session_state.segmentos_selecionados = ["system_prompt", "base_conhecimento", "comments", "planejamento"]

# Carregar agentes
agentes = listar_agentes()

if agentes:
    # Agrupar agentes por categoria
    agentes_por_categoria = {}
    for agente in agentes:
        categoria = agente.get('categoria', 'Social')
        if categoria not in agentes_por_categoria:
            agentes_por_categoria[categoria] = []
        agentes_por_categoria[categoria].append(agente)
    
    # Criar op√ß√µes de sele√ß√£o com agrupamento
    agente_options = {}
    for categoria, agentes_cat in agentes_por_categoria.items():
        for agente in agentes_cat:
            agente_completo = obter_agente_com_heranca(agente['_id'])
            display_name = f"{agente['nome']} ({categoria})"
            if agente.get('agente_mae_id'):
                display_name += " üîó"
            agente_options[display_name] = agente_completo
    
    # Seletor de agente
    col1, col2 = st.columns([3, 1])
    with col1:
        agente_selecionado_display = st.selectbox(
            "Selecione um agente para trabalhar:", 
            list(agente_options.keys()),
            key="seletor_agente_global"
        )
    
    with col2:
        if st.button("üîÑ Aplicar Agente", key="aplicar_agente"):
            st.session_state.agente_selecionado = agente_options[agente_selecionado_display]
            st.success(f"Agente '{agente_selecionado_display}' selecionado!")
            st.rerun()
    
    # Mostrar agente atual selecionado
    if st.session_state.agente_selecionado:
        agente_atual = st.session_state.agente_selecionado
        st.info(f"**Agente Ativo:** {agente_atual['nome']} ({agente_atual.get('categoria', 'Social')})")
        
        # Mostrar informa√ß√µes de heran√ßa se aplic√°vel
        if 'agente_mae_id' in agente_atual and agente_atual['agente_mae_id']:
            agente_original = obter_agente(agente_atual['_id'])
            if agente_original and agente_original.get('herdar_elementos'):
                st.info(f"üîó Este agente herda {len(agente_original['herdar_elementos'])} elementos do agente m√£e")
else:
    st.info("Nenhum agente dispon√≠vel. Crie um agente primeiro na aba de Gerenciamento.")

# Controles de segmentos na sidebar
if st.session_state.agente_selecionado:
    st.sidebar.subheader("üîß Configura√ß√µes do Agente")
    st.sidebar.write("Selecione quais bases de conhecimento usar:")
    
    segmentos_disponiveis = {
        "Prompt do Sistema": "system_prompt",
        "Brand Guidelines": "base_conhecimento", 
        "Coment√°rios do Cliente": "comments",
        "Planejamento": "planejamento"
    }
    
    segmentos_selecionados = []
    for nome, chave in segmentos_disponiveis.items():
        if st.sidebar.checkbox(nome, value=chave in st.session_state.segmentos_selecionados, key=f"seg_{chave}"):
            segmentos_selecionados.append(chave)
    
    st.session_state.segmentos_selecionados = segmentos_selecionados
    
    # Exibir status dos segmentos
    if segmentos_selecionados:
        st.sidebar.success(f"‚úÖ Usando {len(segmentos_selecionados)} segmento(s)")
    else:
        st.sidebar.warning("‚ö†Ô∏è Nenhum segmento selecionado")

st.title("Macfor - Conte√∫do")

# Menu de abas - ADICIONANDO A NOVA ABA DE PIPELINE
tab_pipeline, tab_chat, tab_gerenciamento, tab_briefing, tab_conteudo, tab_blog, tab_revisao_ortografica, tab_revisao_tecnica, tab_briefing_tecnico, tab_otimizacao = st.tabs([
    "üöÄ Pipeline Completo",
    "üí¨ Chat", 
    "‚öôÔ∏è Gerenciar Agentes",
    "üìã Gera√ß√£o de Briefing",
    "‚ú® Gera√ß√£o de Conte√∫do", 
    "üå± Gera√ß√£o de Conte√∫do Blog",
    "üìù Revis√£o Ortogr√°fica",
    "üîß Revis√£o T√©cnica",
    "‚öôÔ∏è Gera√ß√£o de Briefing T√©cnico",
    "üöÄ Otimiza√ß√£o de Conte√∫do"
])

# ========== ABA: PIPELINE COMPLETO ==========
with tab_pipeline:
    st.header("üöÄ Pipeline Completo de Conte√∫do")
    st.markdown("Fluxo completo: **Briefing ‚Üí Conte√∫do ‚Üí Otimiza√ß√£o ‚Üí Revis√£o**")
    
    # Verificar se h√° um agente selecionado
    if not st.session_state.agente_selecionado:
        st.warning("‚ö†Ô∏è Selecione um agente na parte superior do app para usar o pipeline.")
        st.stop()
    
    # Inicializar estado do pipeline
    if "pipeline_etapa" not in st.session_state:
        st.session_state.pipeline_etapa = 1
    if "pipeline_briefing" not in st.session_state:
        st.session_state.pipeline_briefing = ""
    if "pipeline_conteudo" not in st.session_state:
        st.session_state.pipeline_conteudo = ""
    if "pipeline_otimizado" not in st.session_state:
        st.session_state.pipeline_otimizado = ""
    if "pipeline_revisado" not in st.session_state:
        st.session_state.pipeline_revisado = ""
    
    # Barra de progresso do pipeline
    etapas = ["üìã Briefing", "‚ú® Conte√∫do", "üöÄ Otimiza√ß√£o", "‚úÖ Revis√£o"]
    progresso = (st.session_state.pipeline_etapa - 1) / (len(etapas) - 1) if len(etapas) > 1 else 0
    
    col_progresso = st.columns(4)
    for i, etapa in enumerate(etapas):
        with col_progresso[i]:
            if i + 1 < st.session_state.pipeline_etapa:
                st.success(f"‚úì {etapa}")
            elif i + 1 == st.session_state.pipeline_etapa:
                st.info(f"‚ñ∂Ô∏è {etapa}")
            else:
                st.write(f"‚óã {etapa}")
    
    st.progress(progresso)
    
    # ETAPA 1: GERA√á√ÉO DE BRIEFING
    if st.session_state.pipeline_etapa == 1:
        st.subheader("üìã Etapa 1: Gera√ß√£o de Briefing")
        
        with st.form("pipeline_briefing_form"):
            st.write("**Informa√ß√µes do Projeto**")
            
            col1, col2 = st.columns(2)
            with col1:
                nome_projeto = st.text_input("Nome do Projeto:", key="pipeline_nome")
                tipo_conteudo = st.selectbox("Tipo de Conte√∫do:", 
                                           ["Post Social", "Artigo Blog", "Email Marketing", "Landing Page", "Script V√≠deo"],
                                           key="pipeline_tipo")
                publico_alvo = st.text_input("P√∫blico-Alvo:", key="pipeline_publico")
            
            with col2:
                objetivo_geral = st.text_area("Objetivo Geral:", height=100, key="pipeline_objetivo")
                palavras_chave = st.text_input("Palavras-chave:", key="pipeline_keywords")
                tom_voz = st.selectbox("Tom de Voz:", 
                                      ["Formal", "Informal", "Persuasivo", "Educativo", "Inspirador"],
                                      key="pipeline_tom")
            
            st.write("**Informa√ß√µes Espec√≠ficas**")
            informacoes_especificas = st.text_area(
                "Detalhes espec√≠ficos, contexto, informa√ß√µes t√©cnicas, etc:",
                height=200,
                placeholder="Exemplo: Produto X para controle de nematoides na soja. Caracter√≠sticas: princ√≠pio ativo Y, dosagem Z. Benef√≠cios: aumento de produtividade, prote√ß√£o prolongada...",
                key="pipeline_especifico"
            )
            
            if st.form_submit_button("üéØ Gerar Briefing", use_container_width=True):
                with st.spinner("Gerando briefing profissional..."):
                    try:
                        # Construir prompt para briefing
                        prompt_briefing = f"""
                        Com base nas seguintes informa√ß√µes, crie um briefing completo e profissional:
                        
                        PROJETO: {nome_projeto}
                        TIPO DE CONTE√öDO: {tipo_conteudo}
                        P√öBLICO-ALVO: {publico_alvo}
                        OBJETIVO: {objetivo_geral}
                        PALAVRAS-CHAVE: {palavras_chave}
                        TOM DE VOZ: {tom_voz}
                        INFORMA√á√ïES ESPEC√çFICAS: {informacoes_especificas}
                        
                        Estruture o briefing com:
                        1. RESUMO EXECUTIVO
                        2. OBJETIVOS ESPEC√çFICOS
                        3. P√öBLICO-ALVO DETALHADO
                        4. TOM E ESTILO
                        5. CONTE√öDO PRINCIPAL
                        6. CHAMADAS PARA A√á√ÉO
                        7. METAS E M√âTRICAS
                        8. OBSERVA√á√ïES T√âCNICAS
                        
                        Seja detalhado e espec√≠fico.
                        """
                        
                        # Usar o contexto do agente selecionado
                        agente = st.session_state.agente_selecionado
                        contexto = construir_contexto(agente, st.session_state.segmentos_selecionados)
                        prompt_completo = contexto + "\n\n" + prompt_briefing
                        
                        resposta = modelo_texto.generate_content(prompt_completo)
                        st.session_state.pipeline_briefing = resposta.text
                        st.session_state.pipeline_etapa = 2
                        st.success("Briefing gerado com sucesso! Avance para a pr√≥xima etapa.")
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"Erro ao gerar briefing: {str(e)}")
        
        # Mostrar briefing gerado se existir
        if st.session_state.pipeline_briefing:
            st.subheader("üìÑ Briefing Gerado")
            st.text_area("Briefing:", value=st.session_state.pipeline_briefing, height=400, key="display_briefing")
            
            if st.button("‚û°Ô∏è Avan√ßar para Gera√ß√£o de Conte√∫do", key="avancar_etapa2"):
                st.session_state.pipeline_etapa = 2
                st.rerun()

    # ETAPA 2: GERA√á√ÉO DE CONTE√öDO
    elif st.session_state.pipeline_etapa == 2:
        st.subheader("‚ú® Etapa 2: Gera√ß√£o de Conte√∫do")
        
        if not st.session_state.pipeline_briefing:
            st.warning("Nenhum briefing encontrado. Volte para a etapa 1.")
            if st.button("‚¨ÖÔ∏è Voltar para Briefing"):
                st.session_state.pipeline_etapa = 1
                st.rerun()
            st.stop()
        
        st.info("**Briefing da Etapa Anterior:**")
        st.text_area("Briefing:", value=st.session_state.pipeline_briefing, height=200, key="briefing_review", label_visibility="collapsed")
        
        with st.form("pipeline_conteudo_form"):
            st.write("**Configura√ß√µes de Conte√∫do**")
            
            col1, col2 = st.columns(2)
            with col1:
                estilo_conteudo = st.selectbox("Estilo de Conte√∫do:", 
                                             ["Informativo", "Persuasivo", "Educativo", "Storytelling", "T√©cnico"],
                                             key="pipeline_estilo")
                numero_palavras = st.slider("N√∫mero de Palavras:", 300, 2000, 800, key="pipeline_palavras")
            
            with col2:
                incluir_cta = st.checkbox("Incluir Call-to-Action", value=True, key="pipeline_cta")
                incluir_exemplos = st.checkbox("Incluir Exemplos Pr√°ticos", value=True, key="pipeline_exemplos")
            
            if st.form_submit_button("üé® Gerar Conte√∫do", use_container_width=True):
                with st.spinner("Criando conte√∫do personalizado..."):
                    try:
                        # Construir prompt para conte√∫do
                        prompt_conteudo = f"""
                        Com base no briefing abaixo, crie um conte√∫do completo e engajador:
                        
                        {st.session_state.pipeline_briefing}
                        
                        CONFIGURA√á√ïES ADICIONAIS:
                        - Estilo: {estilo_conteudo}
                        - N√∫mero de palavras: aproximadamente {numero_palavras}
                        - Incluir CTA: {incluir_cta}
                        - Incluir exemplos pr√°ticos: {incluir_exemplos}
                        
                        Estruture o conte√∫do de forma l√≥gica e atrativa para o p√∫blico-alvo.
                        """
                        
                        # Usar o contexto do agente selecionado
                        agente = st.session_state.agente_selecionado
                        contexto = construir_contexto(agente, st.session_state.segmentos_selecionados)
                        prompt_completo = contexto + "\n\n" + prompt_conteudo
                        
                        resposta = modelo_texto.generate_content(prompt_completo)
                        st.session_state.pipeline_conteudo = resposta.text
                        st.session_state.pipeline_etapa = 3
                        st.success("Conte√∫do gerado com sucesso! Avance para a pr√≥xima etapa.")
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"Erro ao gerar conte√∫do: {str(e)}")
        
        # Mostrar conte√∫do gerado se existir
        if st.session_state.pipeline_conteudo:
            st.subheader("üìÑ Conte√∫do Gerado")
            st.text_area("Conte√∫do:", value=st.session_state.pipeline_conteudo, height=400, key="display_conteudo")
            
            col_voltar, col_avancar = st.columns(2)
            with col_voltar:
                if st.button("‚¨ÖÔ∏è Voltar para Briefing", key="voltar_etapa1"):
                    st.session_state.pipeline_etapa = 1
                    st.rerun()
            with col_avancar:
                if st.button("‚û°Ô∏è Avan√ßar para Otimiza√ß√£o", key="avancar_etapa3"):
                    st.session_state.pipeline_etapa = 3
                    st.rerun()

    # ETAPA 3: OTIMIZA√á√ÉO DE CONTE√öDO
    elif st.session_state.pipeline_etapa == 3:
        st.subheader("üöÄ Etapa 3: Otimiza√ß√£o de Conte√∫do")
        
        if not st.session_state.pipeline_conteudo:
            st.warning("Nenhum conte√∫do encontrado. Volte para a etapa 2.")
            if st.button("‚¨ÖÔ∏è Voltar para Conte√∫do"):
                st.session_state.pipeline_etapa = 2
                st.rerun()
            st.stop()
        
        st.info("**Conte√∫do da Etapa Anterior:**")
        st.text_area("Conte√∫do:", value=st.session_state.pipeline_conteudo, height=200, key="conteudo_review", label_visibility="collapsed")
        
        with st.form("pipeline_otimizacao_form"):
            st.write("**Configura√ß√µes de Otimiza√ß√£o**")
            
            col1, col2 = st.columns(2)
            with col1:
                tipo_otimizacao = st.selectbox("Foco da Otimiza√ß√£o:", 
                                             ["SEO", "Engajamento", "Convers√£o", "Clareza", "T√©cnico"],
                                             key="pipeline_foco")
                nivel_agro = st.selectbox("N√≠vel T√©cnico Agr√≠cola:", 
                                        ["B√°sico", "Intermedi√°rio", "Avan√ßado"],
                                        key="pipeline_nivel")
            
            with col2:
                incluir_metatags = st.checkbox("Gerar Meta Tags SEO", value=True, key="pipeline_metatags")
                otimizar_estrutura = st.checkbox("Otimizar Estrutura", value=True, key="pipeline_estrutura")
            
            palavras_chave_otimizacao = st.text_input("Palavras-chave para SEO (opcional):", key="pipeline_seo_keys")
            
            if st.form_submit_button("üîß Otimizar Conte√∫do", use_container_width=True):
                with st.spinner("Otimizando conte√∫do com foco agro..."):
                    try:
                        # PROMPT DE OTIMIZA√á√ÉO AGRO (conforme solicitado)
                        prompt_otimizacao = f"""
                        SUA PERSONALIDADE: Voc√™ √© um agr√¥nomo s√™nior (15+ anos de campo) e estrategista de SEO/Conte√∫do para o agro no Brasil (pt-BR). Voc√™ une profundidade t√©cnica (cultivos, manejo, sustentabilidade, produtividade) com marketing de conte√∫do e SEO avan√ßado para posicionar marcas do agroneg√≥cio no topo do Google.  
                        
                        Objetivo macro: Otimizar o conte√∫do enviado com base em "SEO Kit" profissional, maximizando tr√°fego org√¢nico qualificado, autoridade tem√°tica e convers√µes. 
                        
                        SEO KIT: 
                        - Portugu√™s brasileiro, tecnicamente embasado, acess√≠vel e humano. 
                        - Subt√≠tulo a cada ~200 palavras; cada subt√≠tulo com 8‚Äì12 linhas. 
                        - Par√°grafos curtos (m√°x. 3 frases, 1 ideia central). 
                        - Negrito apenas em conceitos-chave; it√°lico para cita√ß√µes/termos estrangeiros/disclaimers. 
                        - Evite jarg√£o excessivo; defina termos t√©cnicos quando surgirem. 
                        - Inclua exemplos pr√°ticos de campo, mini estudos de caso COM FONTES e orienta√ß√µes acion√°veis. 
                        - Trate sazonalidade e regionaliza√ß√£o (biomas/zonas clim√°ticas do Brasil) quando pertinente. 
                        - E-E-A-T: deixar claras a experi√™ncia pr√°tica, fontes confi√°veis e originalidade. Sem conte√∫do gen√©rico. 
                        
                        Reda√ß√£o especializada e escane√°vel (atualize o ARTIGO) 
                        - Introdu√ß√£o curta e impactante com promessa clara e CTA inicial. 
                        - Em cada se√ß√£o: explique porqu√™/como/quando com FONTES (condi√ß√µes agron√¥micas, clima, solo, fenologia). 
                        - Traga dados e refer√™ncias (ensaios, boletins t√©cnicos, normas) com links confi√°veis. 
                        - Sinalize pontos ideais para imagens/gr√°ficos (ex.: curva de produtividade vs. aduba√ß√£o; diagn√≥stico de praga; tabela de h√≠bridos). 
                        - Inclua tabelas quando houver comparativos (dose/√©poca/manejo; custo/benef√≠cio). 
                        - Use mini-casos do campo (antes/depois, ganho em sc/ha, ROI estimado). 
                        - Conclus√£o forte com CTA (ex.: Baixe, Aplique, Fale com um especialista). 
                        
                        CONFIGURA√á√ïES ATUAIS:
                        - Foco da otimiza√ß√£o: {tipo_otimizacao}
                        - N√≠vel t√©cnico: {nivel_agro}
                        - Palavras-chave: {palavras_chave_otimizacao}
                        - Gerar meta tags: {incluir_metatags}
                        - Otimizar estrutura: {otimizar_estrutura}
                        
                        CONTE√öDO A SER OTIMIZADO:
                        {st.session_state.pipeline_conteudo}
                        
                        AO FINAL DO ARTIGO OTIMIZADO: 
                        1) On-page SEO completo (entregar junto com o artigo) 
                        - Title tag (‚â§60 caracteres) com KW1 no in√≠cio. 
                        - Meta description (‚â§155 caracteres) com benef√≠cio + CTA. 
                        - H1 distinto do Title, natural e com KW1. 
                        - URL slug curto, descritivo, com KW1 (sem stopwords desnecess√°rias). 
                        
                        2) Conformidade e seguran√ßa (YMYL leve no agro) 
                        - Adicionar disclaimer quando envolver seguran√ßa de alimentos, aplica√ß√µes qu√≠micas, legisla√ß√µes ou recomenda√ß√µes com receitu√°rio agron√¥mico. 
                        - Refor√ßar boas pr√°ticas, EPIs e cumprimento de r√≥tulo/legisla√ß√£o vigente. 
                        
                        Retorne o conte√∫do otimizado seguindo EXATAMENTE estas instru√ß√µes.
                        """
                        
                        resposta = modelo_texto.generate_content(prompt_otimizacao)
                        st.session_state.pipeline_otimizado = resposta.text
                        st.session_state.pipeline_etapa = 4
                        st.success("Conte√∫do otimizado com sucesso! Avance para a pr√≥xima etapa.")
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"Erro ao otimizar conte√∫do: {str(e)}")
        
        # Mostrar conte√∫do otimizado se existir
        if st.session_state.pipeline_otimizado:
            st.subheader("üìä Conte√∫do Otimizado")
            st.text_area("Conte√∫do Otimizado:", value=st.session_state.pipeline_otimizado, height=400, key="display_otimizado")
            
            col_voltar, col_avancar = st.columns(2)
            with col_voltar:
                if st.button("‚¨ÖÔ∏è Voltar para Conte√∫do", key="voltar_etapa2"):
                    st.session_state.pipeline_etapa = 2
                    st.rerun()
            with col_avancar:
                if st.button("‚û°Ô∏è Avan√ßar para Revis√£o Final", key="avancar_etapa4"):
                    st.session_state.pipeline_etapa = 4
                    st.rerun()

    # ETAPA 4: REVIS√ÉO FINAL
    elif st.session_state.pipeline_etapa == 4:
        st.subheader("‚úÖ Etapa 4: Revis√£o Final")
        
        if not st.session_state.pipeline_otimizado:
            st.warning("Nenhum conte√∫do otimizado encontrado. Volte para a etapa 3.")
            if st.button("‚¨ÖÔ∏è Voltar para Otimiza√ß√£o"):
                st.session_state.pipeline_etapa = 3
                st.rerun()
            st.stop()
        
        st.info("**Conte√∫do Otimizado da Etapa Anterior:**")
        st.text_area("Conte√∫do Otimizado:", value=st.session_state.pipeline_otimizado, height=200, key="otimizado_review", label_visibility="collapsed")
        
        with st.form("pipeline_revisao_form"):
            st.write("**Configura√ß√µes de Revis√£o**")
            
            col1, col2 = st.columns(2)
            with col1:
                tipo_revisao = st.selectbox("Tipo de Revis√£o:", 
                                          ["Ortogr√°fica e Gramatical", "T√©cnica", "Completa", "Estilo"],
                                          key="pipeline_revisao_tipo")
                rigor_revisao = st.select_slider("Rigor da Revis√£o:", 
                                               ["Leve", "Moderado", "Rigoroso"],
                                               key="pipeline_rigor")
            
            with col2:
                verificar_fatos = st.checkbox("Verificar Precis√£o de Fatos", value=True, key="pipeline_fatos")
                sugerir_melhorias = st.checkbox("Sugerir Melhorias", value=True, key="pipeline_sugestoes")
            
            if st.form_submit_button("üîç Realizar Revis√£o Final", use_container_width=True):
                with st.spinner("Realizando revis√£o completa..."):
                    try:
                        prompt_revisao = f"""
                        Realize uma revis√£o {tipo_revisao.lower()} {rigor_revisao.lower()} do seguinte conte√∫do:
                        
                        {st.session_state.pipeline_otimizado}
                        
                        CONFIGURA√á√ïES:
                        - Tipo de revis√£o: {tipo_revisao}
                        - Rigor: {rigor_revisao}
                        - Verificar fatos: {verificar_fatos}
                        - Sugerir melhorias: {sugerir_melhorias}
                        
                        Forne√ßa:
                        1. Conte√∫do revisado e corrigido
                        2. Lista de altera√ß√µes realizadas
                        3. Pontua√ß√£o de qualidade (1-10)
                        4. { "Sugest√µes de melhoria" if sugerir_melhorias else "Apenas corre√ß√µes essenciais" }
                        
                        Seja minucioso e profissional na an√°lise.
                        """
                        
                        resposta = modelo_texto.generate_content(prompt_revisao)
                        st.session_state.pipeline_revisado = resposta.text
                        st.success("Revis√£o finalizada com sucesso! Pipeline completo.")
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"Erro na revis√£o: {str(e)}")
        
        # Mostrar resultado final
        if st.session_state.pipeline_revisado:
            st.subheader("üéâ Conte√∫do Final Revisado")
            st.text_area("Conte√∫do Final:", value=st.session_state.pipeline_revisado, height=400, key="display_final")
            
            # Bot√µes de a√ß√£o final
            col1, col2, col3 = st.columns(3)
            with col1:
                st.download_button(
                    "üíæ Baixar Conte√∫do Final",
                    data=st.session_state.pipeline_revisado,
                    file_name=f"conteudo_final_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain",
                    use_container_width=True
                )
            with col2:
                if st.button("üîÑ Novo Pipeline", use_container_width=True):
                    # Resetar pipeline
                    for key in ["pipeline_etapa", "pipeline_briefing", "pipeline_conteudo", "pipeline_otimizado", "pipeline_revisado"]:
                        if key in st.session_state:
                            del st.session_state[key]
                    st.session_state.pipeline_etapa = 1
                    st.rerun()
            with col3:
                if st.button("‚¨ÖÔ∏è Voltar para Otimiza√ß√£o", key="voltar_etapa3"):
                    st.session_state.pipeline_etapa = 3
                    st.rerun()
            
            # Resumo do pipeline
            st.subheader("üìä Resumo do Pipeline")
            col_res1, col_res2, col_res3, col_res4 = st.columns(4)
            
            with col_res1:
                st.metric("Briefing", "‚úì Completo")
            with col_res2:
                st.metric("Conte√∫do", "‚úì Gerado")
            with col_res3:
                st.metric("Otimiza√ß√£o", "‚úì Aplicada")
            with col_res4:
                st.metric("Revis√£o", "‚úì Finalizada")

# ========== ABA: CHAT ==========
with tab_chat:
    st.header("üí¨ Chat com Agente")
    
    # Inicializar estado da sess√£o
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Verificar se h√° agente selecionado
    if not st.session_state.agente_selecionado:
        st.info("Selecione um agente na parte superior do app para iniciar o chat.")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Conversando com: {agente['nome']}")
        
        # Exibir hist√≥rico de mensagens
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Input do usu√°rio
        if prompt := st.chat_input("Digite sua mensagem..."):
            # Adicionar mensagem do usu√°rio ao hist√≥rico
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Construir contexto com segmentos selecionados
            contexto = construir_contexto(
                agente, 
                st.session_state.segmentos_selecionados, 
                st.session_state.messages
            )
            
            # Gerar resposta
            with st.chat_message("assistant"):
                with st.spinner('Pensando...'):
                    try:
                        resposta = modelo_texto.generate_content(contexto)
                        st.markdown(resposta.text)
                        
                        # Adicionar ao hist√≥rico
                        st.session_state.messages.append({"role": "assistant", "content": resposta.text})
                        
                        # Salvar conversa com segmentos utilizados
                        salvar_conversa(
                            agente['_id'], 
                            st.session_state.messages,
                            st.session_state.segmentos_selecionados
                        )
                        
                    except Exception as e:
                        st.error(f"Erro ao gerar resposta: {str(e)}")

# ========== ABA: GERENCIAMENTO DE AGENTES ==========
with tab_gerenciamento:
    st.header("‚öôÔ∏è Gerenciamento de Agentes")
    
    # Verificar autentica√ß√£o apenas para gerenciamento
    if st.session_state.user != "admin":
        st.warning("Acesso restrito a administradores")
    else:
        # Verificar senha de admin
        if not check_admin_password():
            st.warning("Digite a senha de administrador")
        else:
            # Mostra o bot√£o de logout admin
            if st.button("Logout Admin", key="admin_logout"):
                if "admin_password_correct" in st.session_state:
                    del st.session_state["admin_password_correct"]
                if "admin_user" in st.session_state:
                    del st.session_state["admin_user"]
                st.rerun()
            
            st.write(f'Bem-vindo administrador!')
            
            # Subabas para gerenciamento
            sub_tab1, sub_tab2, sub_tab3 = st.tabs(["Criar Agente", "Editar Agente", "Gerenciar Agentes"])
            
            with sub_tab1:
                st.subheader("Criar Novo Agente")
                
                with st.form("form_criar_agente"):
                    nome_agente = st.text_input("Nome do Agente:")
                    
                    # Sele√ß√£o de categoria
                    categoria = st.selectbox(
                        "Categoria:",
                        ["Social", "SEO", "Conte√∫do"],
                        help="Organize o agente por √°rea de atua√ß√£o"
                    )
                    
                    # Op√ß√£o para criar como agente filho
                    criar_como_filho = st.checkbox("Criar como agente filho (herdar elementos)")
                    
                    agente_mae_id = None
                    herdar_elementos = []
                    
                    if criar_como_filho:
                        # Listar TODOS os agentes dispon√≠veis para heran√ßa
                        agentes_mae = listar_agentes_para_heranca()
                        if agentes_mae:
                            agente_mae_options = {f"{agente['nome']} ({agente.get('categoria', 'Social')})": agente['_id'] for agente in agentes_mae}
                            agente_mae_selecionado = st.selectbox(
                                "Agente M√£e:",
                                list(agente_mae_options.keys()),
                                help="Selecione o agente do qual este agente ir√° herdar elementos"
                            )
                            agente_mae_id = agente_mae_options[agente_mae_selecionado]
                            
                            st.subheader("Elementos para Herdar"
                            herdar_elementos = st.multiselect(
                                "Selecione os elementos a herdar do agente m√£e:",
                                ["system_prompt", "base_conhecimento", "comments", "planejamento"],
                                help="Estes elementos ser√£o herdados do agente m√£e se n√£o preenchidos abaixo"
                            )
                        else:
                            st.info("Nenhum agente dispon√≠vel para heran√ßa. Crie primeiro um agente m√£e.")
                    
                    system_prompt = st.text_area("Prompt de Sistema:", height=150, 
                                                placeholder="Ex: Voc√™ √© um assistente especializado em...",
                                                help="Deixe vazio se for herdar do agente m√£e")
                    base_conhecimento = st.text_area("Brand Guidelines:", height=200,
                                                   placeholder="Cole aqui informa√ß√µes, diretrizes, dados...",
                                                   help="Deixe vazio se for herdar do agente m√£e")
                    comments = st.text_area("Coment√°rios do cliente:", height=200,
                                                   placeholder="Cole aqui os coment√°rios de ajuste do cliente (Se houver)",
                                                   help="Deixe vazio se for herdar do agente m√£e")
                    planejamento = st.text_area("Planejamento:", height=200,
                                               placeholder="Estrat√©gias, planejamentos, cronogramas...",
                                               help="Deixe vazio se for herdar do agente m√£e")
                    
                    submitted = st.form_submit_button("Criar Agente")
                    if submitted:
                        if nome_agente:
                            agente_id = criar_agente(
                                nome_agente, 
                                system_prompt, 
                                base_conhecimento, 
                                comments, 
                                planejamento,
                                categoria,
                                agente_mae_id if criar_como_filho else None,
                                herdar_elementos if criar_como_filho else []
                            )
                            st.success(f"Agente '{nome_agente}' criado com sucesso na categoria {categoria}!")
                        else:
                            st.error("Nome √© obrigat√≥rio!")
            
            with sub_tab2:
                st.subheader("Editar Agente Existente")
                
                agentes = listar_agentes()
                if agentes:
                    agente_options = {agente['nome']: agente for agente in agentes}
                    agente_selecionado_nome = st.selectbox("Selecione o agente para editar:", 
                                                         list(agente_options.keys()))
                    
                    if agente_selecionado_nome:
                        agente = agente_options[agente_selecionado_nome]
                        
                        with st.form("form_editar_agente"):
                            novo_nome = st.text_input("Nome do Agente:", value=agente['nome'])
                            
                            # Categoria
                            nova_categoria = st.selectbox(
                                "Categoria:",
                                ["Social", "SEO", "Conte√∫do"],
                                index=["Social", "SEO", "Conte√∫do"].index(agente.get('categoria', 'Social')),
                                help="Organize o agente por √°rea de atua√ß√£o"
                            )
                            
                            # Informa√ß√µes de heran√ßa
                            if agente.get('agente_mae_id'):
                                agente_mae = obter_agente(agente['agente_mae_id'])
                                if agente_mae:
                                    st.info(f"üîó Este agente √© filho de: {agente_mae['nome']}")
                                    st.write(f"Elementos herdados: {', '.join(agente.get('herdar_elementos', []))}")
                            
                            # Op√ß√£o para tornar independente
                            if agente.get('agente_mae_id'):
                                tornar_independente = st.checkbox("Tornar agente independente (remover heran√ßa)")
                                if tornar_independente:
                                    agente_mae_id = None
                                    herdar_elementos = []
                                else:
                                    agente_mae_id = agente.get('agente_mae_id')
                                    herdar_elementos = agente.get('herdar_elementos', [])
                            else:
                                agente_mae_id = None
                                herdar_elementos = []
                                # Op√ß√£o para adicionar heran√ßa
                                adicionar_heranca = st.checkbox("Adicionar heran√ßa de agente m√£e")
                                if adicionar_heranca:
                                    # Listar TODOS os agentes dispon√≠veis para heran√ßa (excluindo o pr√≥prio)
                                    agentes_mae = listar_agentes_para_heranca(agente['_id'])
                                    if agentes_mae:
                                        agente_mae_options = {f"{agente_mae['nome']} ({agente_mae.get('categoria', 'Social')})": agente_mae['_id'] for agente_mae in agentes_mae}
                                        if agente_mae_options:
                                            agente_mae_selecionado = st.selectbox(
                                                "Agente M√£e:",
                                                list(agente_mae_options.keys()),
                                                help="Selecione o agente do qual este agente ir√° herdar elementos"
                                            )
                                            agente_mae_id = agente_mae_options[agente_mae_selecionado]
                                            herdar_elementos = st.multiselect(
                                                "Elementos para herdar:",
                                                ["system_prompt", "base_conhecimento", "comments", "planejamento"],
                                                default=herdar_elementos
                                            )
                                        else:
                                            st.info("Nenhum agente dispon√≠vel para heran√ßa.")
                                    else:
                                        st.info("Nenhum agente dispon√≠vel para heran√ßa.")
                            
                            novo_prompt = st.text_area("Prompt de Sistema:", value=agente['system_prompt'], height=150)
                            nova_base = st.text_area("Brand Guidelines:", value=agente.get('base_conhecimento', ''), height=200)
                            nova_comment = st.text_area("Coment√°rios:", value=agente.get('comments', ''), height=200)
                            novo_planejamento = st.text_area("Planejamento:", value=agente.get('planejamento', ''), height=200)
                            
                            submitted = st.form_submit_button("Atualizar Agente")
                            if submitted:
                                if novo_nome:
                                    atualizar_agente(
                                        agente['_id'], 
                                        novo_nome, 
                                        novo_prompt, 
                                        nova_base, 
                                        nova_comment, 
                                        novo_planejamento,
                                        nova_categoria,
                                        agente_mae_id,
                                        herdar_elementos
                                    )
                                    st.success(f"Agente '{novo_nome}' atualizado com sucesso!")
                                    st.rerun()
                                else:
                                    st.error("Nome √© obrigat√≥rio!")
                else:
                    st.info("Nenhum agente criado ainda.")
            
            with sub_tab3:
                st.subheader("Gerenciar Agentes")
                
                # Filtros por categoria
                categorias = ["Todos", "Social", "SEO", "Conte√∫do"]
                categoria_filtro = st.selectbox("Filtrar por categoria:", categorias)
                
                agentes = listar_agentes()
                
                # Aplicar filtro
                if categoria_filtro != "Todos":
                    agentes = [agente for agente in agentes if agente.get('categoria') == categoria_filtro]
                
                if agentes:
                    for i, agente in enumerate(agentes):
                        with st.container():
                            st.write(f"**{agente['nome']} - {agente.get('categoria', 'Social')} - Criado em {agente['data_criacao'].strftime('%d/%m/%Y')}**")
                            
                            # Mostrar informa√ß√µes de heran√ßa
                            if agente.get('agente_mae_id'):
                                agente_mae = obter_agente(agente['agente_mae_id'])
                                if agente_mae:
                                    st.write(f"**üîó Herda de:** {agente_mae['nome']}")
                                    st.write(f"**Elementos herdados:** {', '.join(agente.get('herdar_elementos', []))}")
                            
                            st.write(f"**Prompt de Sistema:** {agente['system_prompt'][:100]}..." if agente['system_prompt'] else "**Prompt de Sistema:** (herdado ou vazio)")
                            if agente.get('base_conhecimento'):
                                st.write(f"**Brand Guidelines:** {agente['base_conhecimento'][:200]}...")
                            if agente.get('comments'):
                                st.write(f"**Coment√°rios do cliente:** {agente['comments'][:200]}...")
                            if agente.get('planejamento'):
                                st.write(f"**Planejamento:** {agente['planejamento'][:200]}...")
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("Selecionar para Chat", key=f"select_{i}"):
                                    st.session_state.agente_selecionado = obter_agente_com_heranca(agente['_id'])
                                    st.session_state.messages = []
                                    st.success(f"Agente '{agente['nome']}' selecionado!")
                            with col2:
                                if st.button("Desativar", key=f"delete_{i}"):
                                    desativar_agente(agente['_id'])
                                    st.success(f"Agente '{agente['nome']}' desativado!")
                                    st.rerun()
                            st.divider()
                else:
                    st.info("Nenhum agente encontrado para esta categoria.")

# ========== ABA: GERA√á√ÉO DE BRIEFING ==========
with tab_briefing:
    st.header("üìã Gerador de Briefing")
    st.caption("Crie briefings completos para diferentes √°reas de atua√ß√£o")
    
    # Conex√£o com MongoDB para briefings
    try:
        client2 = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
        db_briefings = client2['briefings_Broto_Tecnologia']
        collection_briefings = db_briefings['briefings']
        mongo_connected = True
    except Exception as e:
        st.error(f"Erro na conex√£o com MongoDB: {str(e)}")
        mongo_connected = False
    
    # Tipos de briefing dispon√≠veis organizados por categoria
    tipos_briefing = {
        "Social": [
            "Post √∫nico",
            "Planejamento Mensal"
        ],
        "CRM": [
            "Planejamento de CRM",
            "Fluxo de Nutri√ß√£o",
            "Email Marketing"
        ],
        "M√≠dias": [
            "Campanha de M√≠dia"
        ],
        "Tech": [
            "Manuten√ß√£o de Site",
            "Constru√ß√£o de Site",
            "Landing Page"
        ],
        "Analytics": [
            "Dashboards"
        ],
        "Design": [
            "Social",
            "CRM",
            "M√≠dia",
            "KV/Identidade Visual"
        ],
        "Reda√ß√£o": [
            "Email Marketing",
            "Site",
            "Campanha de M√≠dias"
        ],
        "Planejamento": [
            "Relat√≥rios",
            "Estrat√©gico",
            "Concorr√™ncia"
        ]
    }

    # Aba de configura√ß√£o
    tab_new, tab_saved = st.tabs(["Novo Briefing", "Briefings Salvos"])
        
    with tab_new:
        # Sele√ß√£o hier√°rquica do tipo de briefing
        categoria = st.selectbox("Categoria:", list(tipos_briefing.keys()))
        tipo_briefing = st.selectbox("Tipo de Briefing:", tipos_briefing[categoria])
        
        # Campos comuns a todos os briefings
        st.subheader("Informa√ß√µes B√°sicas")
        nome_projeto = st.text_input("Nome do Projeto:")
        responsavel = st.text_input("Respons√°vel pelo Briefing:")
        data_entrega = st.date_input("Data de Entrega Prevista:")
        objetivo_geral = st.text_area("Objetivo Geral:")
        obs = st.text_area("Observa√ß√µes")
        
        # Se√ß√£o din√¢mica baseada no tipo de briefing
        st.subheader("Informa√ß√µes Espec√≠ficas")
        
        # Dicion√°rio para armazenar todos os campos
        campos_briefing = {
            "basicos": {
                "nome_projeto": nome_projeto,
                "responsavel": responsavel,
                "data_entrega": str(data_entrega),
                "objetivo_geral": objetivo_geral,
                "obs": obs
            },
            "especificos": {}
        }
            
        # Fun√ß√£o para criar campos din√¢micos com sele√ß√£o
        def criar_campo_selecionavel(rotulo, tipo="text_area", opcoes=None, padrao=None, key_suffix=""):
            # Cria uma chave √∫nica baseada no r√≥tulo e sufixo
            key = f"{rotulo}_{key_suffix}_{tipo}"
            
            # Inicializa o valor no session_state se n√£o existir
            if key not in st.session_state:
                st.session_state[key] = padrao if padrao is not None else ""
            
            col1, col2 = st.columns([4, 1])
            valor = None
            
            with col1:
                if tipo == "text_area":
                    valor = st.text_area(rotulo, value=st.session_state[key], key=f"input_{key}")
                elif tipo == "text_input":
                    valor = st.text_input(rotulo, value=st.session_state[key], key=f"input_{key}")
                elif tipo == "selectbox":
                    valor = st.selectbox(rotulo, opcoes, index=opcoes.index(st.session_state[key]) if st.session_state[key] in opcoes else 0, key=f"input_{key}")
                elif tipo == "multiselect":
                    valor = st.multiselect(rotulo, opcoes, default=st.session_state[key], key=f"input_{key}")
                elif tipo == "date_input":
                    valor = st.date_input(rotulo, value=st.session_state[key], key=f"input_{key}")
                elif tipo == "number_input":
                    valor = st.number_input(rotulo, value=st.session_state[key], key=f"input_{key}")
                elif tipo == "file_uploader":
                    return st.file_uploader(rotulo, key=f"input_{key}")  # Retorna direto pois n√£o pode ser salvo no MongoDB
            
            with col2:
                incluir = st.checkbox("", value=True, key=f"incluir_{key}")
                auto_preencher = st.button("ü™Ñ", key=f"auto_{key}", help="Preencher automaticamente com LLM")
            
            if auto_preencher:
                # Carrega contexto do data.txt
                try:
                    with open("data.txt", "r") as f:
                        contexto = f.read()
                except:
                    contexto = "Contexto n√£o dispon√≠vel"
                
                prompt = f"Com base no seguinte contexto:\n{contexto}\n\n E o objetivo do briefing {objetivo_geral} \n\nPreencha o campo '{rotulo}' para um briefing do tipo {tipo_briefing}. Retorne APENAS o valor para o campo, sem coment√°rios ou formata√ß√£o adicional."
                
                try:
                    resposta = modelo_texto.generate_content(prompt)
                    # Atualiza o session_state com a resposta da LLM
                    st.session_state[key] = resposta.text
                    # For√ßa o rerun para atualizar a interface
                    st.rerun()
                except Exception as e:
                    st.error(f"Erro ao gerar sugest√£o: {str(e)}")
                    st.session_state[key] = ""
            
            # Atualiza o valor no session_state se foi modificado manualmente
            if valor is not None and valor != st.session_state[key]:
                st.session_state[key] = valor
            
            return st.session_state[key] if incluir else None

        # ========== SOCIAL ==========
        if tipo_briefing == "Post √∫nico":
            campos_briefing['especificos']['fotos'] = criar_campo_selecionavel("Sugest√£o de Fotos necess√°rias:")
            campos_briefing['especificos']['texto'] = criar_campo_selecionavel("Sugest√£o de Texto do post:")
            campos_briefing['especificos']['expectativa'] = criar_campo_selecionavel("Sugest√£o de Expectativa de resultado:")
            campos_briefing['especificos']['tom_voz'] = criar_campo_selecionavel("Sugest√£o de Tom de voz:")
            campos_briefing['especificos']['direcionamento_arte'] = criar_campo_selecionavel("Sugest√£o de Direcionamento para a arte (KV):")
            campos_briefing['especificos']['palavras_chave'] = criar_campo_selecionavel("Sugest√£o de Palavras/conceitos-chave:")
            campos_briefing['especificos']['do_donts'] = criar_campo_selecionavel("Sugest√£o de Do's and Don'ts:")
            campos_briefing['especificos']['referencias'] = criar_campo_selecionavel("Sugest√£o de Refer√™ncias:")
            campos_briefing['especificos']['materiais_extras'] = criar_campo_selecionavel("Sugest√£o de Materiais extras:")
            campos_briefing['especificos']['info_sensiveis'] = criar_campo_selecionavel("Sugest√£o de Informa√ß√µes sens√≠veis:")
            
            if st.checkbox("√â sobre produtos?"):
                campos_briefing['especificos']['produtos_destaque'] = criar_campo_selecionavel("Sugest√£o de Produtos para destacar:")
        
        elif tipo_briefing == "Planejamento Mensal":
            campos_briefing['especificos']['eventos_mes'] = criar_campo_selecionavel("Sugest√£o de Eventos do m√™s:")
            campos_briefing['especificos']['datas_comemorativas'] = criar_campo_selecionavel("Sugest√£o de Datas/comemora√ß√µes:")
            campos_briefing['especificos']['expectativa_mensal'] = criar_campo_selecionavel("Sugest√£o de Expectativa de resultados:")
            campos_briefing['especificos']['planejamento_conteudos'] = criar_campo_selecionavel("Sugest√£o de Conte√∫dos planejados:")
            campos_briefing['especificos']['produtos_temas'] = criar_campo_selecionavel("Sugest√£o de Produtos/temas t√©cnicos:")
            campos_briefing['especificos']['planejamento_anual'] = criar_campo_selecionavel("Sugest√£o de Planejamento anual aprovado:", "file_uploader")
            campos_briefing['especificos']['manuais'] = criar_campo_selecionavel("Sugest√£o de Manuais de conte√∫do dispon√≠veis:")
        
        # ========== CRM ==========
        elif tipo_briefing == "Planejamento de CRM":
            campos_briefing['especificos']['escopo'] = criar_campo_selecionavel("Escopo contratado:")
            campos_briefing['especificos']['ferramenta_crm'] = criar_campo_selecionavel("Ferramenta de CRM utilizada:")
            campos_briefing['especificos']['maturidade'] = criar_campo_selecionavel("Maturidade de CRM:", "selectbox", 
                                                                                 ["Iniciante", "Intermedi√°rio", "Avan√ßado"])
            campos_briefing['especificos']['objetivo_crm'] = criar_campo_selecionavel("Objetivo com CRM:")
            campos_briefing['especificos']['canais'] = criar_campo_selecionavel("Canais dispon√≠veis:", "multiselect", 
                                                                              ["Email", "SMS", "WhatsApp", "M√≠dia Paga"])
            campos_briefing['especificos']['perfil_empresa'] = criar_campo_selecionavel("Perfil da empresa:", "selectbox", ["B2B", "B2C"])
            campos_briefing['especificos']['metas'] = criar_campo_selecionavel("Metas a serem alcan√ßadas:")
            campos_briefing['especificos']['tamanho_base'] = criar_campo_selecionavel("Tamanho da base:")
            campos_briefing['especificos']['segmentacao'] = criar_campo_selecionavel("Segmenta√ß√£o/p√∫blico-alvo:")
            campos_briefing['especificos']['tom_voz'] = criar_campo_selecionavel("Tom de voz:")
            campos_briefing['especificos']['fluxos'] = criar_campo_selecionavel("Fluxos/e-mails para trabalhar:")
            
            if st.checkbox("Gera√ß√£o de leads?"):
                campos_briefing['especificos']['sla'] = criar_campo_selecionavel("SLA entre marketing e vendas:")
        
        elif tipo_briefing == "Fluxo de Nutri√ß√£o":
            campos_briefing['especificos']['gatilho'] = criar_campo_selecionavel("Gatilho de entrada:")
            campos_briefing['especificos']['asset_relacionado'] = criar_campo_selecionavel("Asset/evento relacionado:")
            campos_briefing['especificos']['etapa_funil'] = criar_campo_selecionavel("Etapa do funil:", "selectbox", 
                                                                                  ["Topo", "Meio", "Fundo"])
            campos_briefing['especificos']['canais_fluxo'] = criar_campo_selecionavel("Canais para o fluxo:", "multiselect", 
                                                                                   ["Email", "SMS", "WhatsApp", "M√≠dia Paga"])
            campos_briefing['especificos']['data_ativacao'] = criar_campo_selecionavel("Data de ativa√ß√£o esperada:", "date_input")
            campos_briefing['especificos']['objetivo_fluxo'] = criar_campo_selecionavel("Objetivo do fluxo:")
            campos_briefing['especificos']['resultado_esperado'] = criar_campo_selecionavel("Resultado final esperado:")

        elif tipo_briefing == "Email Marketing":
            campos_briefing['especificos']['publico_email'] = criar_campo_selecionavel("P√∫blico e segmenta√ß√£o:")
            campos_briefing['especificos']['data_disparo'] = criar_campo_selecionavel("Data de disparo:", "date_input")
            campos_briefing['especificos']['horario_preferencial'] = criar_campo_selecionavel("Hor√°rio preferencial:", "text_input")
            campos_briefing['especificos']['objetivo_email'] = criar_campo_selecionavel("Objetivo:")
            campos_briefing['especificos']['resultado_esperado'] = criar_campo_selecionavel("Resultado final esperado:")
            campos_briefing['especificos']['psd_figma'] = criar_campo_selecionavel("Arquivo PSD/Figma do email:", "file_uploader")
            campos_briefing['especificos']['google_doc'] = criar_campo_selecionavel("Link do Google Doc com conte√∫do:", "text_input")
            campos_briefing['especificos']['links_videos'] = criar_campo_selecionavel("Links de v√≠deos:")
            campos_briefing['especificos']['ctas'] = criar_campo_selecionavel("CTAs:")

        elif tipo_briefing == "Campanha de M√≠dia":
            campos_briefing['especificos']['periodo_acao'] = criar_campo_selecionavel("Per√≠odo da a√ß√£o:", "text_input")
            campos_briefing['especificos']['orcamento'] = criar_campo_selecionavel("Or√ßamento (R$):", "number_input")
            campos_briefing['especificos']['mecanismo_promocional'] = criar_campo_selecionavel("Mecanismo promocional:")
            campos_briefing['especificos']['praca_especifica'] = criar_campo_selecionavel("Pra√ßa espec√≠fica:")
            campos_briefing['especificos']['responsavel_criativo'] = criar_campo_selecionavel("Quem far√° os criativos:", "selectbox", 
                                                                                           ["Macfor", "Cliente"])
            campos_briefing['especificos']['materiais'] = criar_campo_selecionavel("Materiais (copies e pe√ßas criativas):")
            campos_briefing['especificos']['objetivo_acao'] = criar_campo_selecionavel("Objetivo da a√ß√£o:")
            campos_briefing['especificos']['meta'] = criar_campo_selecionavel("Meta:")
            campos_briefing['especificos']['plataformas'] = criar_campo_selecionavel("Plataformas:", "multiselect", 
                                                                                  ["Facebook", "Instagram", "Google Ads", "LinkedIn"])
            campos_briefing['especificos']['segmentacao'] = criar_campo_selecionavel("Segmenta√ß√£o:")
            campos_briefing['especificos']['link_destino'] = criar_campo_selecionavel("Link de destino:", "text_input")

        elif tipo_briefing == "Manuten√ß√£o de Site":
            st.markdown("**Descreva a demanda usando 5W2H:**")
            campos_briefing['especificos']['what'] = criar_campo_selecionavel("O que precisa ser feito?")
            campos_briefing['especificos']['why'] = criar_campo_selecionavel("Por que √© necess√°rio?")
            campos_briefing['especificos']['where'] = criar_campo_selecionavel("Onde deve ser implementado?")
            campos_briefing['especificos']['when'] = criar_campo_selecionavel("Quando precisa estar pronto?")
            campos_briefing['especificos']['who'] = criar_campo_selecionavel("Quem ser√° impactado?")
            campos_briefing['especificos']['how'] = criar_campo_selecionavel("Como deve funcionar?")
            campos_briefing['especificos']['how_much'] = criar_campo_selecionavel("Qual o esfor√ßo estimado?")
            campos_briefing['especificos']['descricao_alteracao'] = criar_campo_selecionavel("Descri√ß√£o detalhada da altera√ß√£o:")
            campos_briefing['especificos']['prints'] = criar_campo_selecionavel("Anexar prints (se aplic√°vel):", "file_uploader")
            campos_briefing['especificos']['link_referencia'] = criar_campo_selecionavel("Link de refer√™ncia:", "text_input")
            
            if st.checkbox("√â cliente novo?"):
                campos_briefing['especificos']['acessos'] = criar_campo_selecionavel("Acessos (servidor, CMS, etc.):")

        elif tipo_briefing == "Constru√ß√£o de Site":
            campos_briefing['especificos']['acessos'] = criar_campo_selecionavel("Acessos (servidor, nuvens, reposit√≥rios, CMS):")
            campos_briefing['especificos']['dominio'] = criar_campo_selecionavel("Dom√≠nio:", "text_input")
            campos_briefing['especificos']['prototipo'] = criar_campo_selecionavel("Prot√≥tipo em Figma:", "file_uploader")
            campos_briefing['especificos']['conteudos'] = criar_campo_selecionavel("Conte√∫dos (textos, banners, v√≠deos):")
            campos_briefing['especificos']['plataforma'] = criar_campo_selecionavel("Plataforma:", "selectbox", 
                                                                                 ["WordPress", "React", "Vue.js", "Outra"])
            campos_briefing['especificos']['hierarquia'] = criar_campo_selecionavel("Hierarquia de p√°ginas:")
            
            if st.checkbox("Incluir otimiza√ß√£o SEO?"):
                campos_briefing['especificos']['seo'] = True
                campos_briefing['especificos']['palavras_chave'] = criar_campo_selecionavel("Palavras-chave principais:")
            else:
                campos_briefing['especificos']['seo'] = False

        elif tipo_briefing == "Landing Page":
            campos_briefing['especificos']['objetivo_lp'] = criar_campo_selecionavel("Objetivo da LP:")
            campos_briefing['especificos']['plataforma'] = criar_campo_selecionavel("Plataforma de desenvolvimento:", "text_input")
            campos_briefing['especificos']['integracao_site'] = criar_campo_selecionavel("Precisa integrar com site existente?", "selectbox", 
                                                                                      ["Sim", "N√£o"])
            campos_briefing['especificos']['dados_coletar'] = criar_campo_selecionavel("Dados a serem coletados no formul√°rio:")
            campos_briefing['especificos']['destino_dados'] = criar_campo_selecionavel("Onde os dados ser√£o gravados:")
            campos_briefing['especificos']['kv_referencia'] = criar_campo_selecionavel("KV de refer√™ncia:", "file_uploader")
            campos_briefing['especificos']['conteudos_pagina'] = criar_campo_selecionavel("Conte√∫dos da p√°gina:")
            campos_briefing['especificos']['menu'] = criar_campo_selecionavel("Menu/barra de navega√ß√£o:")
            campos_briefing['especificos']['header_footer'] = criar_campo_selecionavel("Header e Footer:")
            campos_briefing['especificos']['comunicar'] = criar_campo_selecionavel("O que deve ser comunicado:")
            campos_briefing['especificos']['nao_comunicar'] = criar_campo_selecionavel("O que n√£o deve ser comunicado:")
            campos_briefing['especificos']['observacoes'] = criar_campo_selecionavel("Observa√ß√µes:")

        elif tipo_briefing == "Dashboards":
            st.markdown("**Acessos:**")
            campos_briefing['especificos']['google_access'] = st.checkbox("Solicitar acesso Google Analytics")
            campos_briefing['especificos']['meta_access'] = st.checkbox("Solicitar acesso Meta Ads")
            campos_briefing['especificos']['outros_acessos'] = criar_campo_selecionavel("Outros acessos necess√°rios:")
            
            st.markdown("**Requisitos do Dashboard:**")
            campos_briefing['especificos']['okrs'] = criar_campo_selecionavel("OKRs e metas:")
            campos_briefing['especificos']['dados_necessarios'] = criar_campo_selecionavel("Dados que precisam ser exibidos:")
            campos_briefing['especificos']['tipos_graficos'] = criar_campo_selecionavel("Tipos de gr√°ficos preferidos:", "multiselect", 
                                                                                      ["Barras", "Linhas", "Pizza", "Mapas", "Tabelas"])
            campos_briefing['especificos']['atualizacao'] = criar_campo_selecionavel("Frequ√™ncia de atualiza√ß√£o:", "selectbox", 
                                                                                  ["Tempo real", "Di√°ria", "Semanal", "Mensal"])

        elif tipo_briefing == "Social (Design)":
            campos_briefing['especificos']['formato'] = criar_campo_selecionavel("Formato:", "selectbox", ["Est√°tico", "Motion"])
            campos_briefing['especificos']['kv'] = criar_campo_selecionavel("KV a ser seguido:", "file_uploader")
            campos_briefing['especificos']['linha_criativa'] = criar_campo_selecionavel("Linha criativa:")
            campos_briefing['especificos']['usar_fotos'] = criar_campo_selecionavel("Usar fotos?", "selectbox", ["Sim", "N√£o"])
            campos_briefing['especificos']['referencias'] = criar_campo_selecionavel("Refer√™ncias:")
            campos_briefing['especificos']['identidade_visual'] = criar_campo_selecionavel("Elementos de identidade visual:")
            campos_briefing['especificos']['texto_arte'] = criar_campo_selecionavel("Texto da arte:")

        elif tipo_briefing == "CRM (Design)":
            st.info("Layouts simples s√£o mais eficientes para CRM!")
            campos_briefing['especificos']['referencias'] = criar_campo_selecionavel("Refer√™ncias visuais:")
            campos_briefing['especificos']['tipografia'] = criar_campo_selecionavel("Tipografia preferencial:", "text_input")
            campos_briefing['especificos']['ferramenta_envio'] = criar_campo_selecionavel("Ferramenta de CRM que enviar√° a arte:", "text_input")
            campos_briefing['especificos']['formato_arte'] = criar_campo_selecionavel("Formato da arte:", "selectbox", ["Imagem", "HTML"])

        elif tipo_briefing == "M√≠dia (Design)":
            campos_briefing['especificos']['formato'] = criar_campo_selecionavel("Formato:", "selectbox", ["Horizontal", "Vertical", "Quadrado"])
            campos_briefing['especificos']['tipo_peca'] = criar_campo_selecionavel("Tipo de pe√ßa:", "selectbox", 
                                                                                 ["Arte est√°tica", "Carrossel", "Motion"])
            campos_briefing['especificos']['direcionamento'] = criar_campo_selecionavel("Direcionamento de conte√∫do:")
            campos_briefing['especificos']['num_pecas'] = criar_campo_selecionavel("N√∫mero de pe√ßas:", "number_input", padrao=1)
            campos_briefing['especificos']['publico'] = criar_campo_selecionavel("P√∫blico-alvo:")
            campos_briefing['especificos']['objetivo'] = criar_campo_selecionavel("Objetivo:")
            campos_briefing['especificos']['referencias_concorrentes'] = criar_campo_selecionavel("Refer√™ncias de concorrentes:")

        elif tipo_briefing == "KV/Identidade Visual":
            campos_briefing['especificos']['info_negocio'] = criar_campo_selecionavel("Informa√ß√µes do neg√≥cio:")
            campos_briefing['especificos']['referencias'] = criar_campo_selecionavel("Refer√™ncias:")
            campos_briefing['especificos']['restricoes'] = criar_campo_selecionavel("O que n√£o fazer (cores, elementos proibidos):")
            campos_briefing['especificos']['manual_anterior'] = criar_campo_selecionavel("Manual de marca anterior:", "file_uploader")
            campos_briefing['especificos']['imagem_transmitir'] = criar_campo_selecionavel("Qual imagem queremos transmitir?")
            campos_briefing['especificos']['tema_campanha'] = criar_campo_selecionavel("Tema da campanha:")
            campos_briefing['especificos']['publico'] = criar_campo_selecionavel("P√∫blico-alvo:")
            campos_briefing['especificos']['tom_voz'] = criar_campo_selecionavel("Tom de voz:")
            campos_briefing['especificos']['banco_imagens'] = criar_campo_selecionavel("Tipo de imagens:", "selectbox", 
                                                                                    ["Banco de imagens", "Pessoas reais"])
            campos_briefing['especificos']['limitacoes'] = criar_campo_selecionavel("Limita√ß√µes de uso:")

        elif tipo_briefing == "Email Marketing (Reda√ß√£o)":
            campos_briefing['especificos']['objetivo_email'] = criar_campo_selecionavel("Objetivo:")
            campos_briefing['especificos']['produtos'] = criar_campo_selecionavel("Produtos a serem divulgados:")
            campos_briefing['especificos']['estrutura'] = criar_campo_selecionavel("Estrutura desejada:")
            campos_briefing['especificos']['cta'] = criar_campo_selecionavel("CTA desejado:")
            campos_briefing['especificos']['link_cta'] = criar_campo_selecionavel("Link para o CTA:", "text_input")
            campos_briefing['especificos']['parte_campanha'] = criar_campo_selecionavel("Faz parte de campanha maior?", "selectbox", 
                                                                                      ["Sim", "N√£o"])

        elif tipo_briefing == "Site (Reda√ß√£o)":
            campos_briefing['especificos']['objetivo_site'] = criar_campo_selecionavel("Objetivo:")
            campos_briefing['especificos']['informacoes'] = criar_campo_selecionavel("Quais informa√ß√µes precisa ter:")
            campos_briefing['especificos']['links'] = criar_campo_selecionavel("Links necess√°rios:")
            campos_briefing['especificos']['wireframe'] = criar_campo_selecionavel("Wireframe do site:", "file_uploader")
            campos_briefing['especificos']['tamanho_texto'] = criar_campo_selecionavel("Tamanho do texto:", "selectbox", 
                                                                                    ["Curto", "M√©dio", "Longo"])
            
            if st.checkbox("√â site novo?"):
                campos_briefing['especificos']['insumos'] = criar_campo_selecionavel("Insumos sobre a empresa/projeto:")

        elif tipo_briefing == "Campanha de M√≠dias (Reda√ß√£o)":
            campos_briefing['especificos']['objetivo_campanha'] = criar_campo_selecionavel("Objetivo:")
            campos_briefing['especificos']['plataformas'] = criar_campo_selecionavel("Plataformas:", "multiselect", 
                                                                                   ["Facebook", "Instagram", "LinkedIn", "Google"])
            campos_briefing['especificos']['palavras_chave'] = criar_campo_selecionavel("Palavras-chave:")
            campos_briefing['especificos']['tom_voz'] = criar_campo_selecionavel("Tom de voz:")
            campos_briefing['especificos']['publico'] = criar_campo_selecionavel("P√∫blico-alvo:")
            campos_briefing['especificos']['cronograma'] = criar_campo_selecionavel("Cronograma:")

        elif tipo_briefing == "Relat√≥rios":
            campos_briefing['especificos']['objetivo_relatorio'] = criar_campo_selecionavel("Objetivo:")
            campos_briefing['especificos']['periodo_analise'] = criar_campo_selecionavel("Per√≠odo de an√°lise:")
            campos_briefing['especificos']['granularidade'] = criar_campo_selecionavel("Granularidade:", "selectbox", 
                                                                                    ["Di√°ria", "Semanal", "Mensal", "Trimestral"])
            campos_briefing['especificos']['metricas'] = criar_campo_selecionavel("M√©tricas a serem inclu√≠das:")
            campos_briefing['especificos']['comparativos'] = criar_campo_selecionavel("Comparativos desejados:")

        elif tipo_briefing == "Estrat√©gico":
            campos_briefing['especificos']['introducao'] = criar_campo_selecionavel("Introdu√ß√£o sobre a empresa:")
            campos_briefing['especificos']['orcamento'] = criar_campo_selecionavel("Or√ßamento (R$):", "number_input")
            campos_briefing['especificos']['publico'] = criar_campo_selecionavel("P√∫blico-alvo:")
            campos_briefing['especificos']['objetivo_mkt'] = criar_campo_selecionavel("Objetivo de marketing:")
            campos_briefing['especificos']['etapas_funil'] = criar_campo_selecionavel("Etapas do funil:", "multiselect", 
                                                                                    ["Topo", "Meio", "Fundo"])
            campos_briefing['especificos']['canais'] = criar_campo_selecionavel("Canais dispon√≠veis:", "multiselect", 
                                                                              ["Social", "Email", "Site", "M√≠dia Paga", "SEO"])
            campos_briefing['especificos']['produtos'] = criar_campo_selecionavel("Produtos/portf√≥lio:")
            campos_briefing['especificos']['metas'] = criar_campo_selecionavel("Metas e m√©tricas:")
            campos_briefing['especificos']['concorrentes'] = criar_campo_selecionavel("Concorrentes:")
            campos_briefing['especificos']['acessos'] = criar_campo_selecionavel("Acessos (GA, Meta Ads, etc.):")
            campos_briefing['especificos']['expectativas'] = criar_campo_selecionavel("Expectativas de resultados:")
            campos_briefing['especificos']['materiais'] = criar_campo_selecionavel("Materiais de apoio:")

        elif tipo_briefing == "Concorr√™ncia":
            campos_briefing['especificos']['orcamento'] = criar_campo_selecionavel("Or√ßamento (R$):", "number_input")
            campos_briefing['especificos']['publico'] = criar_campo_selecionavel("P√∫blico-alvo:")
            campos_briefing['especificos']['objetivo'] = criar_campo_selecionavel("Objetivo:")
            campos_briefing['especificos']['etapas_funil'] = criar_campo_selecionavel("Etapas do funil:", "multiselect", 
                                                                                    ["Topo", "Meio", "Fundo"])
            campos_briefing['especificos']['produtos'] = criar_campo_selecionavel("Produtos/portf√≥lio:")
            campos_briefing['especificos']['metas'] = criar_campo_selecionavel("Metas e m√©tricas:")
            campos_briefing['especificos']['concorrentes'] = criar_campo_selecionavel("Concorrentes:")
            campos_briefing['especificos']['acessos'] = criar_campo_selecionavel("Acessos (GA, Meta Ads, etc.):")
            campos_briefing['especificos']['expectativas'] = criar_campo_selecionavel("Expectativas de resultados:")
        
        # Bot√£o para gerar o briefing
        if st.button("üîÑ Gerar Briefing Completo", type="primary"):
            with st.spinner('Construindo briefing profissional...'):
                try:
                    # Remove campos None (n√£o selecionados)
                    campos_briefing['especificos'] = {k: v for k, v in campos_briefing['especificos'].items() if v is not None}
                    
                    # Construir o prompt com todas as informa√ß√µes coletadas
                    prompt_parts = [
                        f"# BRIEFING {tipo_briefing.upper()} - Broto",
                        f"**Projeto:** {campos_briefing['basicos']['nome_projeto']}",
                        f"**Respons√°vel:** {campos_briefing['basicos']['responsavel']}",
                        f"**Data de Entrega:** {campos_briefing['basicos']['data_entrega']}",
                        "",
                        "## 1. INFORMA√á√ïES B√ÅSICAS",
                        f"**Objetivo Geral:** {campos_briefing['basicos']['objetivo_geral']}",
                        "",
                        "## 2. INFORMA√á√µes ESPEC√çFICAS"
                    ]
                    
                    # Adicionar campos espec√≠ficos
                    for campo, valor in campos_briefing['especificos'].items():
                        if isinstance(valor, list):
                            valor = ", ".join(valor)
                        prompt_parts.append(f"**{campo.replace('_', ' ').title()}:** {valor}")
                    
                    prompt = "\n".join(prompt_parts)
                    resposta = modelo_texto.generate_content('Gere o seguinte documento de Briefing EM PORTUGU√äS BRASILEIRO ' + prompt)

                    # Salvar no MongoDB
                    if mongo_connected:
                        briefing_data = {
                            "tipo": tipo_briefing,
                            "categoria": categoria,
                            "nome_projeto": campos_briefing['basicos']['nome_projeto'],
                            "responsavel": campos_briefing['basicos']['responsavel'],
                            "data_criacao": datetime.datetime.now(),
                            "data_entrega": campos_briefing['basicos']['data_entrega'],
                            "conteudo": resposta.text,
                            "campos_preenchidos": campos_briefing,
                            "observacoes": obs,
                        }
                        collection_briefings.insert_one(briefing_data)

                    st.subheader(f"Briefing {tipo_briefing} - {campos_briefing['basicos']['nome_projeto']}")
                    st.markdown(resposta.text)
                                
                    st.download_button(
                        label="üì• Download do Briefing",
                        data=resposta.text,
                        file_name=f"briefing_{tipo_briefing.lower().replace(' ', '_')}_{campos_briefing['basicos']['nome_projeto'].lower().replace(' ', '_')}.txt",
                        mime="text/plain"
                    )
                        
                except Exception as e:
                    st.error(f"Erro ao gerar briefing: {str(e)}")

    with tab_saved:
        st.subheader("Briefings Salvos")
        
        if mongo_connected:
            # Filtros
            col_filtro1, col_filtro2 = st.columns(2)
            with col_filtro1:
                filtro_categoria = st.selectbox("Filtrar por categoria:", ["Todos"] + list(tipos_briefing.keys()), key="filtro_cat")
            with col_filtro2:
                if filtro_categoria == "Todos":
                    tipos_disponiveis = [item for sublist in tipos_briefing.values() for item in sublist]
                    filtro_tipo = st.selectbox("Filtrar por tipo:", ["Todos"] + tipos_disponiveis, key="filtro_tipo")
                else:
                    filtro_tipo = st.selectbox("Filtrar por tipo:", ["Todos"] + tipos_briefing[filtro_categoria], key="filtro_tipo")
            
            # Construir query para MongoDB
            query = {}
            if filtro_categoria != "Todos":
                query["categoria"] = filtro_categoria
            if filtro_tipo != "Todos":
                query["tipo"] = filtro_tipo
            
            # Buscar briefings - adicionei ordena√ß√£o por data decrescente
            briefings_salvos = list(collection_briefings.find(query).sort("data_criacao", -1).limit(50))
            
            # Debug: mostra quantos documentos foram encontrados
            st.caption(f"Documentos encontrados: {len(briefings_salvos)}")
            
            if not briefings_salvos:
                st.info("Nenhum briefing encontrado com os filtros selecionados")
            else:
                for briefing in briefings_salvos:
                    # Usando um container em vez de expander para evitar o problema de aninhamento
                    with st.container():
                        st.write(f"**{briefing['tipo']} - {briefing['nome_projeto']} ({briefing['data_criacao'].strftime('%d/%m/%Y')})**")
                        st.markdown(briefing['conteudo'])
                        
                        col1, col2 = st.columns([4, 1])
                        with col1:
                            st.download_button(
                                label="üì• Download",
                                data=briefing['conteudo'],
                                file_name=f"briefing_{briefing['tipo'].lower().replace(' ', '_')}_{briefing['nome_projeto'].lower().replace(' ', '_')}.txt",
                                mime="text/plain",
                                key=f"dl_{briefing['_id']}"
                            )
                        with col2:
                            if st.button("üóëÔ∏è", key=f"del_{briefing['_id']}"):
                                collection_briefings.delete_one({"_id": briefing['_id']})
                                st.rerun()
                        st.divider()

# ========== ABA: GERA√á√ÉO DE CONTE√öDO ==========
with tab_conteudo:
    st.header("‚ú® Gera√ß√£o de Conte√∫do")
    
    # Conex√£o com MongoDB para briefings
    try:
        client2 = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
        db_briefings = client2['briefings_Broto_Tecnologia']
        collection_briefings = db_briefings['briefings']
        mongo_connected_conteudo = True
    except Exception as e:
        st.error(f"Erro na conex√£o com MongoDB: {str(e)}")
        mongo_connected_conteudo = False
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìù Entrada do Briefing")
        
        # Op√ß√£o 1: Selecionar briefing do banco de dados
        st.write("**Selecione um briefing salvo:**")
        if mongo_connected_conteudo:
            briefings_disponiveis = list(collection_briefings.find().sort("data_criacao", -1).limit(20))
            if briefings_disponiveis:
                briefing_options = {f"{briefing['nome_projeto']} ({briefing['tipo']}) - {briefing['data_criacao'].strftime('%d/%m/%Y')}": briefing for briefing in briefings_disponiveis}
                briefing_selecionado = st.selectbox("Escolha um briefing:", list(briefing_options.keys()))
                
                if briefing_selecionado:
                    briefing_data = briefing_options[briefing_selecionado]
                    st.info(f"Briefing selecionado: {briefing_data['nome_projeto']}")
            else:
                st.info("Nenhum briefing encontrado no banco de dados.")
        else:
            st.warning("Conex√£o com MongoDB n√£o dispon√≠vel")
        
        # Op√ß√£o 2: Inserir briefing manualmente
        st.write("**Ou cole o briefing manualmente:**")
        briefing_manual = st.text_area("Cole o briefing completo aqui:", height=200,
                                      placeholder="Exemplo:\nT√≠tulo: Campanha de Lan√ßamento\nObjetivo: Divulgar novo produto\nP√∫blico-alvo: Empres√°rios...")
    
    with col2:
        st.subheader("‚öôÔ∏è Configura√ß√µes")
        
        tipo_conteudo = st.selectbox("Tipo de Conte√∫do:", 
                                   ["Post Social", "Artigo Blog", "Email Marketing", "Landing Page", "Script V√≠deo"])
        
        tom_voz = st.selectbox("Tom de Voz:", 
                              ["Formal", "Informal", "Persuasivo", "Educativo", "Inspirador"])
        
        palavras_chave = st.text_input("Palavras-chave (opcional):")
        
        numero_palavras = st.slider("N√∫mero de Palavras:", 100, 2000, 500)
    
    # Bot√£o para gerar conte√∫do
    if st.button("üöÄ Gerar Conte√∫do", type="primary", use_container_width=True):
        if briefing_manual or ('briefing_data' in locals() and briefing_data):
            with st.spinner("Gerando conte√∫do personalizado..."):
                try:
                    # Usar briefing manual se fornecido, caso contr√°rio usar briefing do banco
                    briefing_final = briefing_manual if briefing_manual else briefing_data['conteudo']
                    
                    prompt = f"""
                    Com base no seguinte briefing:
                    
                    {briefing_final}
                    
                    Gere um conte√∫do do tipo {tipo_conteudo} com as seguintes caracter√≠sticas:
                    - Tom de voz: {tom_voz}
                    - Palavras-chave: {palavras_chave if palavras_chave else 'N√£o especificadas'}
                    - N√∫mero aproximado de palavras: {numero_palavras}
                    
                    Estruture o conte√∫do de forma profissional e engajadora.
                    """
                    
                    resposta = modelo_texto.generate_content(prompt)
                    
                    st.subheader("üìÑ Conte√∫do Gerado")
                    st.markdown(resposta.text)
                    
                    st.download_button(
                        "üíæ Baixar Conte√∫do",
                        data=resposta.text,
                        file_name=f"conteudo_gerado_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                        mime="text/plain"
                    )
                    
                except Exception as e:
                    st.error(f"Erro ao gerar conte√∫do: {str(e)}")
        else:
            st.warning("Por favor, selecione um briefing do banco de dados ou cole um briefing manualmente.")

# ========== ABA: GERA√á√ÉO DE CONTE√öDO BLOG AGR√çCOLA ==========
with tab_blog:
    st.title("üå± Gerador de Blog Posts Agr√≠colas")
    st.markdown("Crie conte√∫dos especializados para o agroneg√≥cio seguindo a estrutura profissional")

    # Conex√£o com MongoDB
    try:
        client_mongo = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
        db = client_mongo['blog_posts_agricolas']
        collection_posts = db['posts_gerados']
        collection_briefings = db['briefings']
        collection_kbf = db['kbf_produtos']
        mongo_connected_blog = True
    except Exception as e:
        st.error(f"Erro na conex√£o com MongoDB: {str(e)}")
        mongo_connected_blog = False

    # Fun√ß√µes para o banco de dados
    def salvar_post(titulo, cultura, editoria, mes_publicacao, objetivo_post, url, texto_gerado, palavras_chave, palavras_proibidas, tom_voz, estrutura, palavras_contagem, meta_title, meta_descricao, linha_fina):
        if mongo_connected_blog:
            documento = {
                "id": str(uuid.uuid4()),
                "titulo": titulo,
                "cultura": cultura,
                "editoria": editoria,
                "mes_publicacao": mes_publicacao,
                "objetivo_post": objetivo_post,
                "url": url,
                "texto_gerado": texto_gerado,
                "palavras_chave": palavras_chave,
                "palavras_proibidas": palavras_proibidas,
                "tom_voz": tom_voz,
                "estrutura": estrutura,
                "palavras_contagem": palavras_contagem,
                "meta_title": meta_title,
                "meta_descricao": meta_descricao,
                "linha_fina": linha_fina,
                "data_criacao": datetime.now(),
                "versao": "2.0"
            }
            collection_posts.insert_one(documento)
            return True
        return False

    def carregar_kbf_produtos():
        if mongo_connected_blog:
            try:
                kbf_docs = list(collection_kbf.find({}))
                return kbf_docs
            except:
                return []
        return []

    def salvar_briefing(briefing_data):
        if mongo_connected_blog:
            documento = {
                "id": str(uuid.uuid4()),
                "briefing": briefing_data,
                "data_criacao": datetime.now()
            }
            collection_briefings.insert_one(documento)
            return True
        return False

    def carregar_posts_anteriores():
        if mongo_connected_blog:
            try:
                posts = list(collection_posts.find({}).sort("data_criacao", -1).limit(10))
                return posts
            except:
                return []
        return []

    # Fun√ß√£o para processar transcri√ß√µes
    def processar_transcricoes(arquivos):
        transcricoes = []
        for arquivo in arquivos:
            if arquivo is not None:
                # Simula√ß√£o de processamento de transcri√ß√£o
                # Em produ√ß√£o, integrar com API de transcri√ß√£o
                st.info(f"Processando transcri√ß√£o de: {arquivo.name}")
                transcricoes.append(f"Conte√∫do transcrito de {arquivo.name}")
        return "\n\n".join(transcricoes)

    # Regras base do sistema - ATUALIZADAS
    regras_base = '''
    **REGRAS DE REPLICA√á√ÉO - ESTRUTURA PROFISSIONAL:**

    **1. ESTRUTURA DO DOCUMENTO:**
    - T√≠tulo principal impactante e com chamada para a√ß√£o (m√°x 65 caracteres)
    - Linha fina resumindo o conte√∫do (m√°x 200 caracteres)
    - Meta-title otimizado para SEO (m√°x 60 caracteres)
    - Meta-descri√ß√£o atrativa (m√°x 155 caracteres)
    - Introdu√ß√£o contextualizando o problema e impacto
    - Se√ß√£o de Problema: Detalhamento t√©cnico dos desafios
    - Se√ß√£o de Solu√ß√£o Gen√©rica: Estrat√©gia geral de manejo
    - Se√ß√£o de Solu√ß√£o Espec√≠fica: Produto como resposta aos desafios
    - Conclus√£o com refor√ßo de compromisso e chamada para a√ß√£o
    - Assinatura padr√£o da empresa

    **2. LINGUAGEM E TOM:**
    - {tom_voz}
    - Linguagem {nivel_tecnico} t√©cnica e profissional
    - Uso de terminologia espec√≠fica do agroneg√≥cio
    - Persuas√£o baseada em benef√≠cios e solu√ß√£o de problemas
    - Evitar repeti√ß√£o de informa√ß√µes entre se√ß√µes

    **3. ELEMENTOS T√âCNICOS OBRIGAT√ìRIOS:**
    - Nomes cient√≠ficos entre par√™nteses quando aplic√°vel
    - Cita√ß√£o EXPL√çCITA de fontes confi√°veis (Embrapa, universidades, etc.) mencionando o √≥rg√£o/institui√ß√£o no corpo do texto
    - Destaque para termos t√©cnicos-chave e nomes de produtos
    - Descri√ß√£o detalhada de danos e benef√≠cios
    - Dados concretos e informa√ß√µes mensur√°veis com refer√™ncias espec√≠ficas

    **4. FORMATA√á√ÉO E ESTRUTURA:**
    - Par√°grafos curtos (m√°ximo 4-5 linhas cada)
    - Listas de t√≥picos com no m√°ximo 5 itens cada
    - Evitar blocos extensos de texto
    - Usar subt√≠tulos para quebrar o conte√∫do

    **5. RESTRI√á√ïES:**
    - Palavras proibidas: {palavras_proibidas}
    - Evitar vi√©s comercial expl√≠cito
    - Manter abordagem {abordagem_problema}
    - N√∫mero de palavras: {numero_palavras} (¬±5%)
    - N√ÉO INVENTAR SOLU√á√ïES ou informa√ß√µes n√£o fornecidas
    - Seguir EXATAMENTE o formato e informa√ß√µes do briefing
    '''

    # CONFIGURA√á√ïES DO BLOG (agora dentro da aba)
    st.header("üìã Configura√ß√µes do Blog Agr√≠cola")
    
    col_config1, col_config2 = st.columns(2)
    
    with col_config1:
        # Modo de entrada - Briefing ou Campos Individuais
        modo_entrada = st.radio("Modo de Entrada:", ["Campos Individuais", "Briefing Completo"])
        
        # Controle de palavras - MAIS RESTRITIVO
        numero_palavras = st.slider("N√∫mero de Palavras:", min_value=300, max_value=2500, value=1500, step=100)
        st.info(f"Meta: {numero_palavras} palavras (¬±5%)")
        
        # Palavras-chave
        st.subheader("üîë Palavras-chave")
        palavra_chave_principal = st.text_input("Palavra-chave Principal:")
        palavras_chave_secundarias = st.text_area("Palavras-chave Secund√°rias (separadas por v√≠rgula):")
        
        # Configura√ß√µes de estilo
        st.subheader("üé® Configura√ß√µes de Estilo")
        tom_voz = st.selectbox("Tom de Voz:", ["Jornal√≠stico", "Especialista T√©cnico", "Educativo", "Persuasivo"])
        nivel_tecnico = st.selectbox("N√≠vel T√©cnico:", ["B√°sico", "Intermedi√°rio", "Avan√ßado"])
        abordagem_problema = st.text_area("Aborde o problema de tal forma que:", "seja claro, t√©cnico e focando na solu√ß√£o pr√°tica para o produtor")
    
    with col_config2:
        # Restri√ß√µes
        st.subheader("üö´ Restri√ß√µes")
        palavras_proibidas = st.text_area("Palavras Proibidas (separadas por v√≠rgula):", "melhor, n√∫mero 1, l√≠der, insuper√°vel, inven√ß√£o, inventado, solu√ß√£o m√°gica")
        
        # Estrutura do texto
        st.subheader("üìê Estrutura do Texto")
        estrutura_opcoes = st.multiselect("Se√ß√µes do Post:", 
                                         ["Introdu√ß√£o", "Problema", "Solu√ß√£o Gen√©rica", "Solu√ß√£o Espec√≠fica", 
                                          "Benef√≠cios", "Implementa√ß√£o Pr√°tica", "Conclus√£o", "Fontes"],
                                         default=["Introdu√ß√£o", "Problema", "Solu√ß√£o Gen√©rica", "Solu√ß√£o Espec√≠fica", "Conclus√£o"])
        
        # KBF de Produtos
        st.subheader("üì¶ KBF de Produtos")
        kbf_produtos = carregar_kbf_produtos()
        if kbf_produtos:
            produtos_disponiveis = [prod['nome'] for prod in kbf_produtos]
            produto_selecionado = st.selectbox("Selecionar Produto do KBF:", ["Nenhum"] + produtos_disponiveis)
            if produto_selecionado != "Nenhum":
                produto_info = next((prod for prod in kbf_produtos if prod['nome'] == produto_selecionado), None)
                if produto_info:
                    st.info(f"**KBF Fixo:** {produto_info.get('caracteristicas', 'Informa√ß√µes do produto')}")
        else:
            st.info("Nenhum KBF cadastrado no banco de dados")

    # √Årea principal baseada no modo de entrada
    if modo_entrada == "Campos Individuais":
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("üìù Informa√ß√µes B√°sicas")
            titulo_blog = st.text_input("T√≠tulo do Blog:", "Proteja sua soja de nematoides e pragas de solo")
            cultura = st.text_input("Cultura:", "Soja")
            editoria = st.text_input("Editoria:", "Manejo e Prote√ß√£o")
            mes_publicacao = st.text_input("M√™s de Publica√ß√£o:", "08/2025")
            objetivo_post = st.text_area("Objetivo do Post:", "Explicar a import√¢ncia do manejo de nematoides e apresentar solu√ß√µes via tratamento de sementes")
            url = st.text_input("URL:", "/manejo-e-protecao/proteja-sua-soja-de-nematoides")
            
            st.header("üîß Conte√∫do T√©cnico")
            problema_principal = st.text_area("Problema Principal/Contexto:", "Solos compactados e com palhada de milho t√™m favorecido a explos√£o populacional de nematoides")
            pragas_alvo = st.text_area("Pragas/Alvo Principal:", "Nematoide das galhas (Meloidogyne incognita), Nematoide de cisto (Heterodera glycines)")
            danos_causados = st.text_area("Danos Causados:", "Forma√ß√£o de galhas nas ra√≠zes que impedem a absor√ß√£o de √°gua e nutrientes")
            solucao_generica = st.text_area("Solu√ß√£o Gen√©rica:", "Ado√ß√£o de um manejo integrado com gen√©tica resistente, rota√ß√£o de culturas e tratamento de sementes")
        
        with col2:
            st.header("üè≠ Informa√ß√µes da Empresa")
            nome_empresa = st.text_input("Nome da Empresa/Marca:")
            nome_central = st.text_input("Nome da Central de Conte√∫dos:")
            
            st.header("üí° Solu√ß√µes e Produtos")
            nome_produto = st.text_input("Nome do Produto:")
            principio_ativo = st.text_input("Princ√≠pio Ativo/Diferencial:")
            beneficios_produto = st.text_area("Benef√≠cios do Produto:")
            espectro_acao = st.text_area("Espectro de A√ß√£o:")
            
            st.header("üéØ Diretrizes Espec√≠ficas")
            diretrizes_usuario = st.text_area("Diretrizes Adicionais:", 
                                            "N√ÉO INVENTE SOLU√á√ïES. Use apenas informa√ß√µes fornecidas. Incluir dicas pr√°ticas para implementa√ß√£o no campo. Manter linguagem acess√≠vel mas t√©cnica.")
            fontes_pesquisa = st.text_area("Fontes para Pesquisa/Refer√™ncia (cite √≥rg√£os espec√≠ficos):", 
                                         "Embrapa Soja, Universidade de S√£o Paulo - ESALQ, Instituto Biol√≥gico de S√£o Paulo, Artigos t√©cnicos sobre nematoides")
            
            # Upload de M√öLTIPLOS arquivos estrat√©gicos
            arquivos_estrategicos = st.file_uploader("üìé Upload de M√∫ltiplos Arquivos Estrat√©gicos", 
                                                   type=['txt', 'pdf', 'docx', 'mp3', 'wav', 'mp4', 'mov'], 
                                                   accept_multiple_files=True)
            if arquivos_estrategicos:
                st.success(f"{len(arquivos_estrategicos)} arquivo(s) carregado(s) com sucesso!")
    
    else:  # Modo Briefing
        st.header("üìÑ Briefing Completo")
        
        st.warning("""
        **ATEN√á√ÉO:** Para conte√∫dos t√©cnicos complexos (especialmente Syngenta), 
        recomenda-se usar o modo "Campos Individuais" para melhor controle da qualidade.
        """)
        
        briefing_texto = st.text_area("Cole aqui o briefing completo:", height=300,
                                     placeholder="""EXEMPLO DE BRIEFING:
T√≠tulo: Controle Eficiente de Nematoides na Soja
Cultura: Soja
Problema: Aumento da popula√ß√£o de nematoides em solos com palhada de milho
Objetivo: Educar produtores sobre manejo integrado
Produto: NemaControl
P√∫blico-alvo: Produtores de soja t√©cnica
Tom: T√©cnico-jornal√≠stico
Palavras-chave: nematoide, soja, tratamento sementes, manejo integrado

IMPORTANTE: N√ÉO INVENTE SOLU√á√ïES. Use apenas informa√ß√µes fornecidas aqui.""")
        
        if briefing_texto:
            if st.button("Processar Briefing"):
                salvar_briefing(briefing_texto)
                st.success("Briefing salvo no banco de dados!")

    # Configura√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Configura√ß√µes Avan√ßadas"):
        col_av1, col_av2 = st.columns(2)
        
        with col_av1:
            st.subheader("Opcionais")
            usar_pesquisa_web = st.checkbox("üîç Habilitar Pesquisa Web", value=False)
            gerar_blocos_dinamicos = st.checkbox("üîÑ Gerar Blocos Dinamicamente", value=True)
            incluir_fontes = st.checkbox("üìö Incluir Refer√™ncias de Fontes", value=True)
            incluir_assinatura = st.checkbox("‚úçÔ∏è Incluir Assinatura Padr√£o", value=True)
            
        with col_av2:
            st.subheader("Controles de Qualidade")
            evitar_repeticao = st.slider("N√≠vel de Evitar Repeti√ß√£o:", 1, 10, 8)
            profundidade_conteudo = st.selectbox("Profundidade do Conte√∫do:", ["Superficial", "Moderado", "Detalhado", "Especializado"])
            
            # Configura√ß√µes de formata√ß√£o
            st.subheader("üìê Formata√ß√£o")
            max_paragrafos = st.slider("M√°ximo de linhas por par√°grafo:", 3, 8, 5)
            max_lista_itens = st.slider("M√°ximo de itens por lista:", 3, 8, 5)
            
            # M√öLTIPLOS arquivos para transcri√ß√£o
            st.subheader("üé§ Transcri√ß√£o de M√≠dia")
            arquivos_midia = st.file_uploader("√Åudios/V√≠deos para Transcri√ß√£o (m√∫ltiplos)", 
                                            type=['mp3', 'wav', 'mp4', 'mov'], 
                                            accept_multiple_files=True)

    # Metadados para SEO
    st.header("üîç Metadados para SEO")
    col_meta1, col_meta2 = st.columns(2)
    
    with col_meta1:
        meta_title = st.text_input("Meta Title (m√°x 60 caracteres):", 
                                 max_chars=60,
                                 help="T√≠tulo para SEO - aparecer√° nos resultados de busca")
        st.info(f"Caracteres: {len(meta_title)}/60")
        
        linha_fina = st.text_area("Linha Fina (m√°x 200 caracteres):",
                                max_chars=200,
                                help="Resumo executivo que aparece abaixo do t√≠tulo")
        st.info(f"Caracteres: {len(linha_fina)}/200")
    
    with col_meta2:
        meta_descricao = st.text_area("Meta Descri√ß√£o (m√°x 155 caracteres):",
                                    max_chars=155,
                                    help="Descri√ß√£o que aparece nos resultados de busca")
        st.info(f"Caracteres: {len(meta_descricao)}/155")

    # √Årea de gera√ß√£o
    st.header("üîÑ Gera√ß√£o do Conte√∫do")
    
    if st.button("üöÄ Gerar Blog Post", type="primary", use_container_width=True):
        with st.spinner("Gerando conte√∫do... Isso pode levar alguns minutos"):
            try:
                # Processar transcri√ß√µes se houver arquivos
                transcricoes_texto = ""
                if 'arquivos_midia' in locals() and arquivos_midia:
                    transcricoes_texto = processar_transcricoes(arquivos_midia)
                    st.info(f"Processadas {len(arquivos_midia)} transcri√ß√£o(√µes)")
                
                # Construir prompt personalizado - MAIS RESTRITIVO
                regras_personalizadas = regras_base.format(
                    tom_voz=tom_voz,
                    nivel_tecnico=nivel_tecnico,
                    palavras_proibidas=palavras_proibidas,
                    abordagem_problema=abordagem_problema,
                    numero_palavras=numero_palavras
                )
                
                prompt_final = f"""
                **INSTRU√á√ïES PARA CRIA√á√ÉO DE BLOG POST AGR√çCOLA:**
                
                {regras_personalizadas}
                
                **INFORMA√á√ïES ESPEC√çFICAS:**
                - T√≠tulo: {titulo_blog if 'titulo_blog' in locals() else 'A definir'}
                - Cultura: {cultura if 'cultura' in locals() else 'A definir'}
                - Palavra-chave Principal: {palavra_chave_principal}
                - Palavras-chave Secund√°rias: {palavras_chave_secundarias}
                
                **METADADOS:**
                - Meta Title: {meta_title}
                - Meta Description: {meta_descricao}
                - Linha Fina: {linha_fina}
                
                **CONFIGURA√á√ïES DE FORMATA√á√ÉO:**
                - Par√°grafos m√°ximos: {max_paragrafos} linhas
                - Listas m√°ximas: {max_lista_itens} itens
                - Estrutura: {', '.join(estrutura_opcoes)}
                - Profundidade: {profundidade_conteudo}
                - Evitar repeti√ß√£o: N√≠vel {evitar_repeticao}/10
                
                **DIRETRIZES CR√çTICAS:**
                - N√ÉO INVENTE SOLU√á√ïES OU INFORMA√á√ïES
                - Use APENAS dados fornecidos no briefing
                - Cite fontes espec√≠ficas no corpo do texto
                - Mantenha par√°grafos e listas CURTOS
                
                **CONTE√öDO DE TRANSCRI√á√ïES:**
                {transcricoes_texto if transcricoes_texto else 'Nenhuma transcri√ß√£o fornecida'}
                
                **DIRETRIZES ADICIONAIS:** {diretrizes_usuario if 'diretrizes_usuario' in locals() else 'Nenhuma'}
                
                Gere um conte√∫do {profundidade_conteudo.lower()} com EXATAMENTE {numero_palavras} palavras (¬±5%).
                """
                
                response = modelo_texto.generate_content(prompt_final)
                
                texto_gerado = response.text
                
                # Verificar contagem de palavras
                palavras_count = len(texto_gerado.split())
                st.info(f"üìä Contagem de palavras geradas: {palavras_count} (meta: {numero_palavras})")
                
                if abs(palavras_count - numero_palavras) > numero_palavras * 0.1:
                    st.warning("‚ö†Ô∏è A contagem de palavras est√° significativamente diferente da meta")
                
                # Salvar no MongoDB
                if salvar_post(
                    titulo_blog if 'titulo_blog' in locals() else "T√≠tulo gerado",
                    cultura if 'cultura' in locals() else "Cultura n√£o especificada",
                    editoria if 'editoria' in locals() else "Editoria geral",
                    mes_publicacao if 'mes_publicacao' in locals() else datetime.now().strftime("%m/%Y"),
                    objetivo_post if 'objetivo_post' in locals() else "Objetivo n√£o especificado",
                    url if 'url' in locals() else "/",
                    texto_gerado,
                    f"{palavra_chave_principal}, {palavras_chave_secundarias}",
                    palavras_proibidas,
                    tom_voz,
                    ', '.join(estrutura_opcoes),
                    palavras_count,
                    meta_title,
                    meta_descricao,
                    linha_fina
                ):
                    st.success("‚úÖ Post gerado e salvo no banco de dados!")
                
                st.subheader("üìù Conte√∫do Gerado")
                st.markdown(texto_gerado)
                
                st.download_button(
                    "üíæ Baixar Post",
                    data=texto_gerado,
                    file_name=f"blog_post_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain"
                )
                
            except Exception as e:
                st.error(f"Erro na gera√ß√£o: {str(e)}")

    # Banco de textos gerados - CORRIGIDO: usando container em vez de expander
    st.header("üìö Banco de Textos Gerados")
    
    posts_anteriores = carregar_posts_anteriores()
    if posts_anteriores:
        for post in posts_anteriores:
            # Usando container em vez de expander para evitar o problema de aninhamento
            with st.container():
                st.write(f"**{post.get('titulo', 'Sem t√≠tulo')} - {post.get('data_criacao', '').strftime('%d/%m/%Y')}**")
                st.write(f"**Cultura:** {post.get('cultura', 'N/A')}")
                st.write(f"**Palavras:** {post.get('palavras_contagem', 'N/A')}")
                
                # Mostrar metadados salvos
                if post.get('meta_title'):
                    st.write(f"**Meta Title:** {post.get('meta_title')}")
                if post.get('meta_descricao'):
                    st.write(f"**Meta Descri√ß√£o:** {post.get('meta_descricao')}")
                
                st.text_area("Conte√∫do:", value=post.get('texto_gerado', ''), height=200, key=post['id'])
                
                col_uso1, col_uso2 = st.columns(2)
                with col_uso1:
                    if st.button("Reutilizar", key=f"reuse_{post['id']}"):
                        st.session_state.texto_gerado = post.get('texto_gerado', '')
                        st.success("Conte√∫do carregado para reutiliza√ß√£o!")
                with col_uso2:
                    st.download_button(
                        label="üì• Download",
                        data=post.get('texto_gerado', ''),
                        file_name=f"blog_post_{post.get('titulo', 'post').lower().replace(' ', '_')}.txt",
                        mime="text/plain",
                        key=f"dl_btn_{post['id']}"
                    )
                st.divider()
    else:
        st.info("Nenhum post encontrado no banco de dados.")

# ========== ABA: REVIS√ÉO ORTOGR√ÅFICA ==========
with tab_revisao_ortografica:
    st.header("üìù Revis√£o Ortogr√°fica")
    
    texto_para_revisao = st.text_area("Cole o texto que deseja revisar:", height=300)
    
    if st.button("üîç Realizar Revis√£o Ortogr√°fica", type="primary"):
        if texto_para_revisao:
            with st.spinner("Revisando texto..."):
                try:
                    prompt = f"""
                    Fa√ßa uma revis√£o ortogr√°fica e gramatical completa do seguinte texto:
                    
                    {texto_para_revisao}
                    
                    Forne√ßa:
                    1. Texto revisado com corre√ß√µes aplicadas
                    2. Lista de corre√ß√µes realizadas
                    3. Sugest√µes de melhorias de estilo
                    """
                    
                    resposta = modelo_texto.generate_content(prompt)
                    st.subheader("üìã Resultado da Revis√£o")
                    st.markdown(resposta.text)
                    
                except Exception as e:
                    st.error(f"Erro na revis√£o: {str(e)}")
        else:
            st.warning("Por favor, cole um texto para revis√£o.")

# ========== ABA: REVIS√ÉO T√âCNICA ==========
with tab_revisao_tecnica:
    st.header("üîß Revis√£o T√©cnica")
    
    texto_tecnico = st.text_area("Cole o conte√∫do t√©cnico para revis√£o:", height=300)
    area_tecnica = st.selectbox("√Årea T√©cnica:", 
                               ["Agricultura", "Tecnologia", "Engenharia", "Medicina", "Outra"])
    
    if st.button("üîç Realizar Revis√£o T√©cnica", type="primary"):
        if texto_tecnico:
            with st.spinner("Realizando revis√£o t√©cnica..."):
                try:
                    prompt = f"""
                    Fa√ßa uma revis√£o t√©cnica especializada em {area_tecnica} do seguinte conte√∫do:
                    
                    {texto_tecnico}
                    
                    Verifique:
                    1. Precis√£o t√©cnica das informa√ß√µes
                    2. Consist√™ncia de terminologia
                    3. Clareza nas explica√ß√µes
                    4. Atualiza√ß√£o das refer√™ncias
                    5. Sugest√µes de melhorias t√©cnicas
                    """
                    
                    resposta = modelo_texto.generate_content(prompt)
                    st.subheader("üìã Resultado da Revis√£o T√©cnica")
                    st.markdown(resposta.text)
                    
                except Exception as e:
                    st.error(f"Erro na revis√£o t√©cnica: {str(e)}")
        else:
            st.warning("Por favor, cole um conte√∫do t√©cnico para revis√£o.")

# ========== ABA: BRIEFING T√âCNICO ==========
with tab_briefing_tecnico:
    st.header("‚öôÔ∏è Gera√ß√£o de Briefing T√©cnico")
    
    # Esta aba pode ser implementada de forma similar √† aba de briefing geral
    # mas com foco em briefings t√©cnicos espec√≠ficos
    st.info("Em desenvolvimento - Briefings T√©cnicos Especializados")
    
    tipo_briefing_tecnico = st.selectbox("Tipo de Briefing T√©cnico:", 
                                       ["Documenta√ß√£o T√©cnica", "Manual de Produto", "Especifica√ß√µes", "Procedimentos"])
    
    st.text_area("Descreva os requisitos t√©cnicos:", height=200,
                placeholder="Descreva os objetivos, requisitos t√©cnicos, especifica√ß√µes, etc...")

# ========== ABA: OTIMIZA√á√ÉO DE CONTE√öDO ==========
with tab_otimizacao:
    st.header("üöÄ Otimiza√ß√£o de Conte√∫do")
    
    texto_para_otimizar = st.text_area("Cole o conte√∫do para otimiza√ß√£o:", height=300)
    tipo_otimizacao = st.selectbox("Tipo de Otimiza√ß√£o:", 
                                  ["SEO", "Engajamento", "Convers√£o", "Clareza"])
    
    if st.button("üöÄ Otimizar Conte√∫do", type="primary"):
        if texto_para_otimizar:
            with st.spinner("Otimizando conte√∫do..."):
                try:
                    prompt = f"""
                    Otimize o seguinte conte√∫do para {tipo_otimizacao}:
                    
                    {texto_para_otimizar}
                    
                    Forne√ßa:
                    1. Vers√£o otimizada do conte√∫do
                    2. Explica√ß√£o das otimiza√ß√µes realizadas
                    3. M√©tricas esperadas de melhoria
                    """
                    
                    resposta = modelo_texto.generate_content(prompt)
                    st.subheader("üìä Conte√∫do Otimizado")
                    st.markdown(resposta.text)
                    
                except Exception as e:
                    st.error(f"Erro na otimiza√ß√£o: {str(e)}")
        else:
            st.warning("Por favor, cole um conte√∫do para otimiza√ß√£o.")

# --- Estiliza√ß√£o ---
st.markdown("""
<style>
    .stChatMessage {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    [data-testid="stChatMessageContent"] {
        font-size: 1rem;
    }
    div[data-testid="stTabs"] {
        margin-top: -30px;
    }
    .segment-indicator {
        background-color: #f0f2f6;
        padding: 0.5rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border-left: 4px solid #4CAF50;
    }
    /* Estilo para o pipeline */
    .pipeline-step {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin: 10px 0;
        border-left: 5px solid #4CAF50;
    }
    .pipeline-complete {
        border-left-color: #4CAF50;
    }
    .pipeline-current {
        border-left-color: #2196F3;
    }
    .pipeline-pending {
        border-left-color: #ff9800;
    }
</style>
""", unsafe_allow_html=True)
